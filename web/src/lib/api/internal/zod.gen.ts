// This file is auto-generated by @hey-api/openapi-ts

import { z } from "zod";

export const zCheckResult = z.object({
  error: z.optional(z.unknown()),
  status: z.string(),
  timestamp: z.optional(z.iso.datetime()),
});

export const zCreateElectionInputBody = z.object({
  $schema: z.optional(z.url().readonly()),
  name: z.string(),
});

export const zCreateElectionResponseBody = z.object({
  $schema: z.optional(z.url().readonly()),
  election_id: z.string(),
});

export const zElectionMemberListSetInputBody = z.object({
  $schema: z.optional(z.url().readonly()),
  zids: z.union([z.array(z.string()), z.null()]),
});

export const zErrorDetail = z.object({
  location: z.optional(z.string()),
  message: z.optional(z.string()),
  value: z.optional(z.unknown()),
});

export const zErrorModel = z.object({
  $schema: z.optional(z.url().readonly()),
  detail: z.optional(z.string()),
  errors: z.optional(z.union([z.array(zErrorDetail), z.null()])),
  instance: z.optional(z.url()),
  status: z.optional(z.coerce.bigint()),
  title: z.optional(z.string()),
  type: z.optional(z.url()).default("about:blank"),
});

export const zGenerateOtpInputBody = z.object({
  $schema: z.optional(z.url().readonly()),
  zid: z.string().regex(/^z[0-9]{7}$/),
});

export const zGetElectionStateResponseBody = z.object({
  $schema: z.optional(z.url().readonly()),
  election_id: z.optional(z.string()),
  state: z.enum([
    "NO_ELECTION",
    "CLOSED",
    "NOMINATIONS_OPEN",
    "NOMINATIONS_CLOSED",
    "VOTING_OPEN",
    "VOTING_CLOSED",
    "RESULTS",
    "END",
  ]),
  state_created_at: z.optional(z.iso.datetime()),
});

export const zHealthOutput = z.object({
  $schema: z.optional(z.url().readonly()),
  checked: z.iso.datetime(),
  details: z.optional(z.record(z.string(), zCheckResult)),
  health_status: z.enum(["up", "down", "unknown"]),
  info: z.optional(z.record(z.string(), z.unknown())),
});

export const zNomination = z.object({
  $schema: z.optional(z.url().readonly()),
  candidate_name: z.string(),
  candidate_statement: z.string(),
  candidate_zid: z.string(),
  contact_email: z.string(),
  created_at: z.iso.datetime(),
  discord_username: z.string(),
  election_id: z.string(),
  executive_roles: z.union([z.array(z.string()), z.null()]),
  nomination_id: z.string(),
  updated_at: z.iso.datetime(),
  url: z.optional(z.string()),
});

export const zPublicNomination = z.object({
  $schema: z.optional(z.url().readonly()),
  candidate_name: z.string(),
  candidate_statement: z.string(),
  created_at: z.iso.datetime(),
  discord_username: z.string(),
  election_id: z.string(),
  executive_roles: z.union([z.array(z.string()), z.null()]),
  nomination_id: z.string(),
  updated_at: z.iso.datetime(),
  url: z.optional(z.string()),
});

export const zPublicBallot = z.object({
  $schema: z.optional(z.url().readonly()),
  candidates: z.record(z.string(), z.union([z.array(zPublicNomination), z.null()])),
  election_id: z.string(),
  has_voted: z.boolean(),
});

export const zSubmitNomination = z.object({
  $schema: z.optional(z.url().readonly()),
  candidate_name: z.string().min(2).max(100),
  candidate_statement: z.string().min(50).max(2000),
  contact_email: z.email(),
  discord_username: z.string().max(32),
  executive_roles: z.union([
    z
      .array(
        z.enum([
          "president",
          "secretary",
          "treasurer",
          "arc_delegate",
          "edi_officer",
          "grievance_officer",
        ]),
      )
      .min(1)
      .max(6),
    z.null(),
  ]),
  url: z.optional(z.url()),
});

export const zSubmitNominationResponseBody = z.object({
  $schema: z.optional(z.url().readonly()),
  nomination_id: z.string(),
});

export const zSubmitOtpInputBody = z.object({
  $schema: z.optional(z.url().readonly()),
  otp: z.string().regex(/^[0-9]{6}$/),
  zid: z.string().regex(/^z[0-9]{7}$/),
});

export const zSubmitOtpResponseBody = z.object({
  $schema: z.optional(z.url().readonly()),
  expiry: z.iso.datetime(),
  is_admin: z.boolean(),
  zid: z.string().regex(/^z[0-9]{7}$/),
});

export const zSubmitVoteBody = z.object({
  $schema: z.optional(z.url().readonly()),
  positions: z.record(z.string(), z.string()),
});

export const zTransitionElectionStateBody = z.object({
  $schema: z.optional(z.url().readonly()),
  state: z.enum([
    "CLOSED",
    "NOMINATIONS_OPEN",
    "NOMINATIONS_CLOSED",
    "VOTING_OPEN",
    "VOTING_CLOSED",
    "RESULTS",
    "END",
  ]),
});

export const zVote = z.object({
  $schema: z.optional(z.url().readonly()),
  created_at: z.iso.datetime(),
  positions: z.record(z.string(), z.string()),
  updated_at: z.iso.datetime(),
});

export const zCreateElectionInputBodyWritable = z.object({
  name: z.string(),
});

export const zCreateElectionResponseBodyWritable = z.object({
  election_id: z.string(),
});

export const zElectionMemberListSetInputBodyWritable = z.object({
  zids: z.union([z.array(z.string()), z.null()]),
});

export const zErrorModelWritable = z.object({
  detail: z.optional(z.string()),
  errors: z.optional(z.union([z.array(zErrorDetail), z.null()])),
  instance: z.optional(z.url()),
  status: z.optional(z.coerce.bigint()),
  title: z.optional(z.string()),
  type: z.optional(z.url()).default("about:blank"),
});

export const zGenerateOtpInputBodyWritable = z.object({
  zid: z.string().regex(/^z[0-9]{7}$/),
});

export const zGetElectionStateResponseBodyWritable = z.object({
  election_id: z.optional(z.string()),
  state: z.enum([
    "NO_ELECTION",
    "CLOSED",
    "NOMINATIONS_OPEN",
    "NOMINATIONS_CLOSED",
    "VOTING_OPEN",
    "VOTING_CLOSED",
    "RESULTS",
    "END",
  ]),
  state_created_at: z.optional(z.iso.datetime()),
});

export const zHealthOutputWritable = z.object({
  checked: z.iso.datetime(),
  details: z.optional(z.record(z.string(), zCheckResult)),
  health_status: z.enum(["up", "down", "unknown"]),
  info: z.optional(z.record(z.string(), z.unknown())),
});

export const zNominationWritable = z.object({
  candidate_name: z.string(),
  candidate_statement: z.string(),
  candidate_zid: z.string(),
  contact_email: z.string(),
  created_at: z.iso.datetime(),
  discord_username: z.string(),
  election_id: z.string(),
  executive_roles: z.union([z.array(z.string()), z.null()]),
  nomination_id: z.string(),
  updated_at: z.iso.datetime(),
  url: z.optional(z.string()),
});

export const zPublicNominationWritable = z.object({
  candidate_name: z.string(),
  candidate_statement: z.string(),
  created_at: z.iso.datetime(),
  discord_username: z.string(),
  election_id: z.string(),
  executive_roles: z.union([z.array(z.string()), z.null()]),
  nomination_id: z.string(),
  updated_at: z.iso.datetime(),
  url: z.optional(z.string()),
});

export const zPublicBallotWritable = z.object({
  candidates: z.record(z.string(), z.union([z.array(zPublicNominationWritable), z.null()])),
  election_id: z.string(),
  has_voted: z.boolean(),
});

export const zSubmitNominationWritable = z.object({
  candidate_name: z.string().min(2).max(100),
  candidate_statement: z.string().min(50).max(2000),
  contact_email: z.email(),
  discord_username: z.string().max(32),
  executive_roles: z.union([
    z
      .array(
        z.enum([
          "president",
          "secretary",
          "treasurer",
          "arc_delegate",
          "edi_officer",
          "grievance_officer",
        ]),
      )
      .min(1)
      .max(6),
    z.null(),
  ]),
  url: z.optional(z.url()),
});

export const zSubmitNominationResponseBodyWritable = z.object({
  nomination_id: z.string(),
});

export const zSubmitOtpInputBodyWritable = z.object({
  otp: z.string().regex(/^[0-9]{6}$/),
  zid: z.string().regex(/^z[0-9]{7}$/),
});

export const zSubmitOtpResponseBodyWritable = z.object({
  expiry: z.iso.datetime(),
  is_admin: z.boolean(),
  zid: z.string().regex(/^z[0-9]{7}$/),
});

export const zSubmitVoteBodyWritable = z.object({
  positions: z.record(z.string(), z.string()),
});

export const zTransitionElectionStateBodyWritable = z.object({
  state: z.enum([
    "CLOSED",
    "NOMINATIONS_OPEN",
    "NOMINATIONS_CLOSED",
    "VOTING_OPEN",
    "VOTING_CLOSED",
    "RESULTS",
    "END",
  ]),
});

export const zVoteWritable = z.object({
  created_at: z.iso.datetime(),
  positions: z.record(z.string(), z.string()),
  updated_at: z.iso.datetime(),
});

export const zGetBallotData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zGetBallotResponse = zPublicBallot;

export const zCreateElectionData = z.object({
  body: zCreateElectionInputBodyWritable,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zCreateElectionResponse = zCreateElectionResponseBody;

export const zSetElectionMembersData = z.object({
  body: zElectionMemberListSetInputBodyWritable,
  path: z.object({
    election_id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zSetElectionMembersResponse = z.void();

export const zDeleteNominationData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zDeleteNominationResponse = z.void();

export const zGetNominationData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zGetNominationResponse = zNomination;

export const zSubmitNominationData = z.object({
  body: zSubmitNominationWritable,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zSubmitNominationResponse = zSubmitNominationResponseBody;

export const zGetPublicNominationData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    nomination_id: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zGetPublicNominationResponse = zPublicNomination;

export const zGenerateOtpData = z.object({
  body: zGenerateOtpInputBodyWritable,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zGenerateOtpResponse = z.void();

export const zSubmitOtpData = z.object({
  body: zSubmitOtpInputBodyWritable,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zSubmitOtpResponse = zSubmitOtpResponseBody;

export const zGetElectionStateData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zGetElectionStateResponse = zGetElectionStateResponseBody;

export const zAdminTransitionElectionStateData = z.object({
  body: zTransitionElectionStateBodyWritable,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zAdminTransitionElectionStateResponse = z.void();

export const zDeleteVoteData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zDeleteVoteResponse = z.void();

export const zGetVoteData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zGetVoteResponse = zVote;

export const zSubmitVoteData = z.object({
  body: zSubmitVoteBodyWritable,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zSubmitVoteResponse = z.void();

export const zGetHealthData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zGetHealthResponse = zHealthOutput;
