// This file is auto-generated by @hey-api/openapi-ts

export type CheckResult = {
  error?: unknown;
  status: string;
  timestamp?: Date;
};

export type CreateElectionInputBody = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string;
  /**
   * Election name
   */
  name: string;
};

export type CreateElectionResponseBody = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string;
  /**
   * Election ID
   */
  election_id: string;
};

export type ElectionMemberListSetInputBody = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string;
  /**
   * User zIDs
   */
  zids: Array<string> | null;
};

export type ErrorDetail = {
  /**
   * Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
   */
  location?: string;
  /**
   * Error message text
   */
  message?: string;
  /**
   * The value at the given location
   */
  value?: unknown;
};

export type ErrorModel = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string;
  /**
   * A human-readable explanation specific to this occurrence of the problem.
   */
  detail?: string;
  /**
   * Optional list of individual error details
   */
  errors?: Array<ErrorDetail> | null;
  /**
   * A URI reference that identifies the specific occurrence of the problem.
   */
  instance?: string;
  /**
   * HTTP status code
   */
  status?: bigint;
  /**
   * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
   */
  title?: string;
  /**
   * A URI reference to human-readable documentation for the error.
   */
  type?: string;
};

export type GenerateOtpInputBody = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string;
  /**
   * User zID
   */
  zid: string;
};

export type GetElectionStateResponseBody = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string;
  /**
   * Election ID. Only set if an election is running.
   */
  election_id?: string;
  state:
    | "NO_ELECTION"
    | "CLOSED"
    | "NOMINATIONS_OPEN"
    | "NOMINATIONS_CLOSED"
    | "VOTING_OPEN"
    | "VOTING_CLOSED"
    | "RESULTS"
    | "END";
  /**
   * Timestamp when the election first entered this state. Only Set if an election is running.
   */
  state_created_at?: Date;
};

export type HealthOutput = {
  checked: Date;
  details?: {
    [key: string]: CheckResult;
  };
  health_status: "up" | "down" | "unknown";
  info?: {
    [key: string]: unknown;
  };
};

export type Nomination = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string;
  candidate_name: string;
  candidate_statement: string;
  candidate_zid: string;
  contact_email: string;
  created_at: Date;
  discord_username: string;
  election_id: string;
  executive_roles: Array<
    "president" | "secretary" | "treasurer" | "arc_delegate" | "edi_officer" | "grievance_officer"
  > | null;
  nomination_id: string;
  updated_at: Date;
  url?: string;
};

export type PublicBallot = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string;
  /**
   * Map of executive role to list of candidates running for that role
   */
  candidates: {
    [key: string]: Array<PublicNomination> | null;
  };
  /**
   * Election ID
   */
  election_id: string;
  /**
   * Whether the current user has already voted in this election
   */
  has_voted: boolean;
};

export type PublicNomination = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string;
  candidate_name: string;
  candidate_statement: string;
  created_at: Date;
  discord_username: string;
  election_id: string;
  executive_roles: Array<string> | null;
  nomination_id: string;
  updated_at: Date;
  url?: string;
};

export type SubmitNomination = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string;
  candidate_name: string;
  candidate_statement: string;
  contact_email: string;
  discord_username: string;
  executive_roles: Array<
    "president" | "secretary" | "treasurer" | "arc_delegate" | "edi_officer" | "grievance_officer"
  > | null;
  url?: string;
};

export type SubmitNominationResponseBody = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string;
  /**
   * Public nomination ID
   */
  nomination_id: string;
};

export type SubmitOtpInputBody = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string;
  /**
   * OTP Code
   */
  otp: string;
  /**
   * User zID
   */
  zid: string;
};

export type SubmitOtpResponseBody = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string;
  /**
   * Timestamp when your session expires.
   */
  expiry: Date;
  /**
   * Admin status
   */
  is_admin: boolean;
  /**
   * User zID
   */
  zid: string;
};

export type SubmitVoteBody = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string;
  /**
   * A map from categories to public nomination IDs. Find these by accessing your ballot.
   */
  positions: {
    [key: string]: string;
  };
};

export type TransitionElectionStateBody = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string;
  /**
   * State to transition to
   */
  state:
    | "CLOSED"
    | "NOMINATIONS_OPEN"
    | "NOMINATIONS_CLOSED"
    | "VOTING_OPEN"
    | "VOTING_CLOSED"
    | "RESULTS"
    | "END";
};

export type Vote = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string;
  created_at: Date;
  /**
   * A map from categories to public nomination IDs. Find these by accessing your ballot.
   */
  positions: {
    [key: string]: string;
  };
  updated_at: Date;
};

export type CreateElectionInputBodyWritable = {
  /**
   * Election name
   */
  name: string;
};

export type CreateElectionResponseBodyWritable = {
  /**
   * Election ID
   */
  election_id: string;
};

export type ElectionMemberListSetInputBodyWritable = {
  /**
   * User zIDs
   */
  zids: Array<string> | null;
};

export type ErrorModelWritable = {
  /**
   * A human-readable explanation specific to this occurrence of the problem.
   */
  detail?: string;
  /**
   * Optional list of individual error details
   */
  errors?: Array<ErrorDetail> | null;
  /**
   * A URI reference that identifies the specific occurrence of the problem.
   */
  instance?: string;
  /**
   * HTTP status code
   */
  status?: bigint;
  /**
   * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
   */
  title?: string;
  /**
   * A URI reference to human-readable documentation for the error.
   */
  type?: string;
};

export type GenerateOtpInputBodyWritable = {
  /**
   * User zID
   */
  zid: string;
};

export type GetElectionStateResponseBodyWritable = {
  /**
   * Election ID. Only set if an election is running.
   */
  election_id?: string;
  state:
    | "NO_ELECTION"
    | "CLOSED"
    | "NOMINATIONS_OPEN"
    | "NOMINATIONS_CLOSED"
    | "VOTING_OPEN"
    | "VOTING_CLOSED"
    | "RESULTS"
    | "END";
  /**
   * Timestamp when the election first entered this state. Only Set if an election is running.
   */
  state_created_at?: Date;
};

export type NominationWritable = {
  candidate_name: string;
  candidate_statement: string;
  candidate_zid: string;
  contact_email: string;
  created_at: Date;
  discord_username: string;
  election_id: string;
  executive_roles: Array<
    "president" | "secretary" | "treasurer" | "arc_delegate" | "edi_officer" | "grievance_officer"
  > | null;
  nomination_id: string;
  updated_at: Date;
  url?: string;
};

export type PublicBallotWritable = {
  /**
   * Map of executive role to list of candidates running for that role
   */
  candidates: {
    [key: string]: Array<PublicNominationWritable> | null;
  };
  /**
   * Election ID
   */
  election_id: string;
  /**
   * Whether the current user has already voted in this election
   */
  has_voted: boolean;
};

export type PublicNominationWritable = {
  candidate_name: string;
  candidate_statement: string;
  created_at: Date;
  discord_username: string;
  election_id: string;
  executive_roles: Array<string> | null;
  nomination_id: string;
  updated_at: Date;
  url?: string;
};

export type SubmitNominationWritable = {
  candidate_name: string;
  candidate_statement: string;
  contact_email: string;
  discord_username: string;
  executive_roles: Array<
    "president" | "secretary" | "treasurer" | "arc_delegate" | "edi_officer" | "grievance_officer"
  > | null;
  url?: string;
};

export type SubmitNominationResponseBodyWritable = {
  /**
   * Public nomination ID
   */
  nomination_id: string;
};

export type SubmitOtpInputBodyWritable = {
  /**
   * OTP Code
   */
  otp: string;
  /**
   * User zID
   */
  zid: string;
};

export type SubmitOtpResponseBodyWritable = {
  /**
   * Timestamp when your session expires.
   */
  expiry: Date;
  /**
   * Admin status
   */
  is_admin: boolean;
  /**
   * User zID
   */
  zid: string;
};

export type SubmitVoteBodyWritable = {
  /**
   * A map from categories to public nomination IDs. Find these by accessing your ballot.
   */
  positions: {
    [key: string]: string;
  };
};

export type TransitionElectionStateBodyWritable = {
  /**
   * State to transition to
   */
  state:
    | "CLOSED"
    | "NOMINATIONS_OPEN"
    | "NOMINATIONS_CLOSED"
    | "VOTING_OPEN"
    | "VOTING_CLOSED"
    | "RESULTS"
    | "END";
};

export type VoteWritable = {
  created_at: Date;
  /**
   * A map from categories to public nomination IDs. Find these by accessing your ballot.
   */
  positions: {
    [key: string]: string;
  };
  updated_at: Date;
};

export type GetBallotData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/ballot";
};

export type GetBallotErrors = {
  /**
   * Error
   */
  default: ErrorModel;
};

export type GetBallotError = GetBallotErrors[keyof GetBallotErrors];

export type GetBallotResponses = {
  /**
   * OK
   */
  200: PublicBallot;
};

export type GetBallotResponse = GetBallotResponses[keyof GetBallotResponses];

export type CreateElectionData = {
  body: CreateElectionInputBodyWritable;
  path?: never;
  query?: never;
  url: "/api/v1/elections";
};

export type CreateElectionErrors = {
  /**
   * Error
   */
  default: ErrorModel;
};

export type CreateElectionError = CreateElectionErrors[keyof CreateElectionErrors];

export type CreateElectionResponses = {
  /**
   * OK
   */
  200: CreateElectionResponseBody;
};

export type CreateElectionResponse = CreateElectionResponses[keyof CreateElectionResponses];

export type SetElectionMembersData = {
  body: ElectionMemberListSetInputBodyWritable;
  path: {
    /**
     * Election ID
     */
    election_id: string;
  };
  query?: never;
  url: "/api/v1/elections/{election_id}/members";
};

export type SetElectionMembersErrors = {
  /**
   * Error
   */
  default: ErrorModel;
};

export type SetElectionMembersError = SetElectionMembersErrors[keyof SetElectionMembersErrors];

export type SetElectionMembersResponses = {
  /**
   * No Content
   */
  204: void;
};

export type SetElectionMembersResponse =
  SetElectionMembersResponses[keyof SetElectionMembersResponses];

export type DeleteNominationData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/nomination";
};

export type DeleteNominationErrors = {
  /**
   * Error
   */
  default: ErrorModel;
};

export type DeleteNominationError = DeleteNominationErrors[keyof DeleteNominationErrors];

export type DeleteNominationResponses = {
  /**
   * No Content
   */
  204: void;
};

export type DeleteNominationResponse = DeleteNominationResponses[keyof DeleteNominationResponses];

export type GetNominationData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/nomination";
};

export type GetNominationErrors = {
  /**
   * Error
   */
  default: ErrorModel;
};

export type GetNominationError = GetNominationErrors[keyof GetNominationErrors];

export type GetNominationResponses = {
  /**
   * OK
   */
  200: Nomination;
};

export type GetNominationResponse = GetNominationResponses[keyof GetNominationResponses];

export type SubmitNominationData = {
  body: SubmitNominationWritable;
  path?: never;
  query?: never;
  url: "/api/v1/nomination";
};

export type SubmitNominationErrors = {
  /**
   * Error
   */
  default: ErrorModel;
};

export type SubmitNominationError = SubmitNominationErrors[keyof SubmitNominationErrors];

export type SubmitNominationResponses = {
  /**
   * OK
   */
  200: SubmitNominationResponseBody;
};

export type SubmitNominationResponse = SubmitNominationResponses[keyof SubmitNominationResponses];

export type GetPublicNominationData = {
  body?: never;
  path: {
    /**
     * Public nomination ID
     */
    nomination_id: string;
  };
  query?: never;
  url: "/api/v1/nomination/{nomination_id}";
};

export type GetPublicNominationErrors = {
  /**
   * Error
   */
  default: ErrorModel;
};

export type GetPublicNominationError = GetPublicNominationErrors[keyof GetPublicNominationErrors];

export type GetPublicNominationResponses = {
  /**
   * OK
   */
  200: PublicNomination;
};

export type GetPublicNominationResponse =
  GetPublicNominationResponses[keyof GetPublicNominationResponses];

export type GenerateOtpData = {
  body: GenerateOtpInputBodyWritable;
  path?: never;
  query?: never;
  url: "/api/v1/otp/generate";
};

export type GenerateOtpErrors = {
  /**
   * Error
   */
  default: ErrorModel;
};

export type GenerateOtpError = GenerateOtpErrors[keyof GenerateOtpErrors];

export type GenerateOtpResponses = {
  /**
   * No Content
   */
  204: void;
};

export type GenerateOtpResponse = GenerateOtpResponses[keyof GenerateOtpResponses];

export type SubmitOtpData = {
  body: SubmitOtpInputBodyWritable;
  path?: never;
  query?: never;
  url: "/api/v1/otp/submit";
};

export type SubmitOtpErrors = {
  /**
   * Error
   */
  default: ErrorModel;
};

export type SubmitOtpError = SubmitOtpErrors[keyof SubmitOtpErrors];

export type SubmitOtpResponses = {
  /**
   * OK
   */
  200: SubmitOtpResponseBody;
};

export type SubmitOtpResponse = SubmitOtpResponses[keyof SubmitOtpResponses];

export type GetElectionStateData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/state";
};

export type GetElectionStateErrors = {
  /**
   * Error
   */
  default: ErrorModel;
};

export type GetElectionStateError = GetElectionStateErrors[keyof GetElectionStateErrors];

export type GetElectionStateResponses = {
  /**
   * OK
   */
  200: GetElectionStateResponseBody;
};

export type GetElectionStateResponse = GetElectionStateResponses[keyof GetElectionStateResponses];

export type AdminTransitionElectionStateData = {
  body: TransitionElectionStateBodyWritable;
  path?: never;
  query?: never;
  url: "/api/v1/state";
};

export type AdminTransitionElectionStateErrors = {
  /**
   * Error
   */
  default: ErrorModel;
};

export type AdminTransitionElectionStateError =
  AdminTransitionElectionStateErrors[keyof AdminTransitionElectionStateErrors];

export type AdminTransitionElectionStateResponses = {
  /**
   * No Content
   */
  204: void;
};

export type AdminTransitionElectionStateResponse =
  AdminTransitionElectionStateResponses[keyof AdminTransitionElectionStateResponses];

export type DeleteVoteData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/vote";
};

export type DeleteVoteErrors = {
  /**
   * Error
   */
  default: ErrorModel;
};

export type DeleteVoteError = DeleteVoteErrors[keyof DeleteVoteErrors];

export type DeleteVoteResponses = {
  /**
   * No Content
   */
  204: void;
};

export type DeleteVoteResponse = DeleteVoteResponses[keyof DeleteVoteResponses];

export type GetVoteData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/vote";
};

export type GetVoteErrors = {
  /**
   * Error
   */
  default: ErrorModel;
};

export type GetVoteError = GetVoteErrors[keyof GetVoteErrors];

export type GetVoteResponses = {
  /**
   * OK
   */
  200: Vote;
};

export type GetVoteResponse = GetVoteResponses[keyof GetVoteResponses];

export type SubmitVoteData = {
  body: SubmitVoteBodyWritable;
  path?: never;
  query?: never;
  url: "/api/v1/vote";
};

export type SubmitVoteErrors = {
  /**
   * Error
   */
  default: ErrorModel;
};

export type SubmitVoteError = SubmitVoteErrors[keyof SubmitVoteErrors];

export type SubmitVoteResponses = {
  /**
   * No Content
   */
  204: void;
};

export type SubmitVoteResponse = SubmitVoteResponses[keyof SubmitVoteResponses];

export type ClientOptions = {
  baseUrl: "http://localhost:8888" | (string & {});
};
