// This file is auto-generated by @hey-api/openapi-ts

export const CheckResultSchema = {
  additionalProperties: false,
  properties: {
    error: {},
    status: {
      type: "string",
    },
    timestamp: {
      format: "date-time",
      type: "string",
    },
  },
  required: ["status"],
  type: "object",
} as const;

export const CreateElectionInputBodySchema = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: "A URL to the JSON Schema for this object.",
      examples: ["https://example.com/schemas/CreateElectionInputBody.json"],
      format: "uri",
      readOnly: true,
      type: "string",
    },
    name: {
      description: "Election name",
      type: "string",
    },
  },
  required: ["name"],
  type: "object",
} as const;

export const CreateElectionResponseBodySchema = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: "A URL to the JSON Schema for this object.",
      examples: ["https://example.com/schemas/CreateElectionResponseBody.json"],
      format: "uri",
      readOnly: true,
      type: "string",
    },
    election_id: {
      description: "Election ID",
      type: "string",
    },
  },
  required: ["election_id"],
  type: "object",
} as const;

export const ElectionMemberListSetInputBodySchema = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: "A URL to the JSON Schema for this object.",
      examples: ["https://example.com/schemas/ElectionMemberListSetInputBody.json"],
      format: "uri",
      readOnly: true,
      type: "string",
    },
    zids: {
      description: "User zIDs",
      examples: [["z0000000"]],
      items: {
        type: "string",
      },
      type: ["array", "null"],
    },
  },
  required: ["zids"],
  type: "object",
} as const;

export const ErrorDetailSchema = {
  additionalProperties: false,
  properties: {
    location: {
      description: "Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'",
      type: "string",
    },
    message: {
      description: "Error message text",
      type: "string",
    },
    value: {
      description: "The value at the given location",
    },
  },
  type: "object",
} as const;

export const ErrorModelSchema = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: "A URL to the JSON Schema for this object.",
      examples: ["https://example.com/schemas/ErrorModel.json"],
      format: "uri",
      readOnly: true,
      type: "string",
    },
    detail: {
      description: "A human-readable explanation specific to this occurrence of the problem.",
      examples: ["Property foo is required but is missing."],
      type: "string",
    },
    errors: {
      description: "Optional list of individual error details",
      items: {
        $ref: "#/components/schemas/ErrorDetail",
      },
      type: ["array", "null"],
    },
    instance: {
      description: "A URI reference that identifies the specific occurrence of the problem.",
      examples: ["https://example.com/error-log/abc123"],
      format: "uri",
      type: "string",
    },
    status: {
      description: "HTTP status code",
      examples: [400],
      format: "int64",
      type: "integer",
    },
    title: {
      description:
        "A short, human-readable summary of the problem type. This value should not change between occurrences of the error.",
      examples: ["Bad Request"],
      type: "string",
    },
    type: {
      default: "about:blank",
      description: "A URI reference to human-readable documentation for the error.",
      examples: ["https://example.com/errors/example"],
      format: "uri",
      type: "string",
    },
  },
  type: "object",
} as const;

export const GenerateOTPInputBodySchema = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: "A URL to the JSON Schema for this object.",
      examples: ["https://example.com/schemas/GenerateOTPInputBody.json"],
      format: "uri",
      readOnly: true,
      type: "string",
    },
    zid: {
      description: "User zID",
      examples: ["z0000000"],
      pattern: "^z[0-9]{7}$",
      type: "string",
    },
  },
  required: ["zid"],
  type: "object",
} as const;

export const GetElectionStateResponseBodySchema = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: "A URL to the JSON Schema for this object.",
      examples: ["https://example.com/schemas/GetElectionStateResponseBody.json"],
      format: "uri",
      readOnly: true,
      type: "string",
    },
    election_id: {
      description: "Election ID. Only set if an election is running.",
      type: "string",
    },
    state: {
      enum: [
        "NO_ELECTION",
        "CLOSED",
        "NOMINATIONS_OPEN",
        "NOMINATIONS_CLOSED",
        "VOTING_OPEN",
        "VOTING_CLOSED",
        "RESULTS",
        "END",
      ],
      type: "string",
    },
    state_created_at: {
      description:
        "Timestamp when the election first entered this state. Only Set if an election is running.",
      examples: ["2024-01-15T10:30:00Z"],
      format: "date-time",
      type: "string",
    },
  },
  required: ["state"],
  type: "object",
} as const;

export const HealthOutputSchema = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: "A URL to the JSON Schema for this object.",
      examples: ["https://example.com/schemas/HealthOutput.json"],
      format: "uri",
      readOnly: true,
      type: "string",
    },
    checked: {
      format: "date-time",
      type: "string",
    },
    details: {
      additionalProperties: {
        $ref: "#/components/schemas/CheckResult",
      },
      type: "object",
    },
    health_status: {
      enum: ["up", "down", "unknown"],
      examples: ["up"],
      type: "string",
    },
    info: {
      additionalProperties: {},
      type: "object",
    },
  },
  required: ["health_status", "checked"],
  type: "object",
} as const;

export const NominationSchema = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: "A URL to the JSON Schema for this object.",
      examples: ["https://example.com/schemas/Nomination.json"],
      format: "uri",
      readOnly: true,
      type: "string",
    },
    candidate_name: {
      examples: ["John Doe"],
      type: "string",
    },
    candidate_statement: {
      examples: ["I am running for president because..."],
      type: "string",
    },
    candidate_zid: {
      examples: ["z1234567"],
      type: "string",
    },
    contact_email: {
      examples: ["john@example.com"],
      type: "string",
    },
    created_at: {
      examples: ["2024-01-15T10:30:00Z"],
      format: "date-time",
      type: "string",
    },
    discord_username: {
      examples: ["johndoe"],
      type: "string",
    },
    election_id: {
      type: "string",
    },
    executive_roles: {
      examples: [["president", "secretary"]],
      items: {
        type: "string",
      },
      type: ["array", "null"],
    },
    nomination_id: {
      type: "string",
    },
    updated_at: {
      examples: ["2024-01-15T10:30:00Z"],
      format: "date-time",
      type: "string",
    },
    url: {
      examples: ["https://johndoe.com"],
      type: "string",
    },
  },
  required: [
    "nomination_id",
    "election_id",
    "candidate_zid",
    "candidate_name",
    "contact_email",
    "discord_username",
    "executive_roles",
    "candidate_statement",
    "created_at",
    "updated_at",
  ],
  type: "object",
} as const;

export const PublicBallotSchema = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: "A URL to the JSON Schema for this object.",
      examples: ["https://example.com/schemas/PublicBallot.json"],
      format: "uri",
      readOnly: true,
      type: "string",
    },
    candidates: {
      additionalProperties: {
        items: {
          $ref: "#/components/schemas/PublicNomination",
        },
        type: ["array", "null"],
      },
      description: "Map of executive role to list of candidates running for that role",
      examples: [
        {
          president: [],
          secretary: [],
        },
      ],
      type: "object",
    },
    election_id: {
      description: "Election ID",
      examples: ["1"],
      type: "string",
    },
    has_voted: {
      description: "Whether the current user has already voted in this election",
      type: "boolean",
    },
  },
  required: ["election_id", "candidates", "has_voted"],
  type: "object",
} as const;

export const PublicNominationSchema = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: "A URL to the JSON Schema for this object.",
      examples: ["https://example.com/schemas/PublicNomination.json"],
      format: "uri",
      readOnly: true,
      type: "string",
    },
    candidate_name: {
      examples: ["John Doe"],
      type: "string",
    },
    candidate_statement: {
      examples: ["I am running for president because..."],
      type: "string",
    },
    created_at: {
      examples: ["2024-01-15T10:30:00Z"],
      format: "date-time",
      type: "string",
    },
    discord_username: {
      examples: ["johndoe"],
      type: "string",
    },
    election_id: {
      type: "string",
    },
    executive_roles: {
      examples: [["president", "secretary"]],
      items: {
        type: "string",
      },
      type: ["array", "null"],
    },
    nomination_id: {
      type: "string",
    },
    updated_at: {
      examples: ["2024-01-15T10:30:00Z"],
      format: "date-time",
      type: "string",
    },
    url: {
      examples: ["https://johndoe.com"],
      type: "string",
    },
  },
  required: [
    "nomination_id",
    "election_id",
    "candidate_name",
    "discord_username",
    "executive_roles",
    "candidate_statement",
    "created_at",
    "updated_at",
  ],
  type: "object",
} as const;

export const SubmitNominationSchema = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: "A URL to the JSON Schema for this object.",
      examples: ["https://example.com/schemas/SubmitNomination.json"],
      format: "uri",
      readOnly: true,
      type: "string",
    },
    candidate_name: {
      examples: ["John Doe"],
      maxLength: 100,
      minLength: 2,
      type: "string",
    },
    candidate_statement: {
      examples: ["I am running for president because..."],
      maxLength: 2000,
      minLength: 50,
      type: "string",
    },
    contact_email: {
      examples: ["john@example.com"],
      format: "email",
      type: "string",
    },
    discord_username: {
      examples: ["johndoe"],
      maxLength: 32,
      type: "string",
    },
    executive_roles: {
      examples: [["president", "secretary"]],
      items: {
        enum: [
          "president",
          "secretary",
          "treasurer",
          "arc_delegate",
          "edi_officer",
          "grievance_officer",
        ],
        type: "string",
      },
      maxItems: 6,
      minItems: 1,
      type: ["array", "null"],
      uniqueItems: true,
    },
    url: {
      examples: ["https://johndoe.com"],
      format: "uri",
      type: "string",
    },
  },
  required: [
    "candidate_name",
    "contact_email",
    "discord_username",
    "executive_roles",
    "candidate_statement",
  ],
  type: "object",
} as const;

export const SubmitNominationResponseBodySchema = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: "A URL to the JSON Schema for this object.",
      examples: ["https://example.com/schemas/SubmitNominationResponseBody.json"],
      format: "uri",
      readOnly: true,
      type: "string",
    },
    nomination_id: {
      description: "Public nomination ID",
      examples: ["abc123"],
      type: "string",
    },
  },
  required: ["nomination_id"],
  type: "object",
} as const;

export const SubmitOTPInputBodySchema = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: "A URL to the JSON Schema for this object.",
      examples: ["https://example.com/schemas/SubmitOTPInputBody.json"],
      format: "uri",
      readOnly: true,
      type: "string",
    },
    otp: {
      description: "OTP Code",
      examples: ["123123"],
      pattern: "^[0-9]{6}$",
      type: "string",
    },
    zid: {
      description: "User zID",
      examples: ["z0000000"],
      pattern: "^z[0-9]{7}$",
      type: "string",
    },
  },
  required: ["zid", "otp"],
  type: "object",
} as const;

export const SubmitOTPResponseBodySchema = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: "A URL to the JSON Schema for this object.",
      examples: ["https://example.com/schemas/SubmitOTPResponseBody.json"],
      format: "uri",
      readOnly: true,
      type: "string",
    },
    expiry: {
      description: "Timestamp when your session expires.",
      examples: ["2024-01-15T10:30:00Z"],
      format: "date-time",
      type: "string",
    },
    is_admin: {
      description: "Admin status",
      type: "boolean",
    },
    zid: {
      description: "User zID",
      examples: ["z0000000"],
      pattern: "^z[0-9]{7}$",
      type: "string",
    },
  },
  required: ["zid", "expiry", "is_admin"],
  type: "object",
} as const;

export const SubmitVoteBodySchema = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: "A URL to the JSON Schema for this object.",
      examples: ["https://example.com/schemas/SubmitVoteBody.json"],
      format: "uri",
      readOnly: true,
      type: "string",
    },
    positions: {
      additionalProperties: {
        type: "string",
      },
      description:
        "A map from categories to public nomination IDs. Find these by accessing your ballot.",
      examples: [
        {
          president: "01996ae6-31e5-7bc6-bac4-399ffc8c80de",
          secretary: "01996ae6-31e5-7bc6-bac4-399ffc8c80de",
        },
      ],
      type: "object",
    },
  },
  required: ["positions"],
  type: "object",
} as const;

export const TransitionElectionStateBodySchema = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: "A URL to the JSON Schema for this object.",
      examples: ["https://example.com/schemas/TransitionElectionStateBody.json"],
      format: "uri",
      readOnly: true,
      type: "string",
    },
    state: {
      description: "State to transition to",
      enum: [
        "CLOSED",
        "NOMINATIONS_OPEN",
        "NOMINATIONS_CLOSED",
        "VOTING_OPEN",
        "VOTING_CLOSED",
        "RESULTS",
        "END",
      ],
      type: "string",
    },
  },
  required: ["state"],
  type: "object",
} as const;

export const VoteSchema = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: "A URL to the JSON Schema for this object.",
      examples: ["https://example.com/schemas/Vote.json"],
      format: "uri",
      readOnly: true,
      type: "string",
    },
    created_at: {
      examples: ["2024-01-15T10:30:00Z"],
      format: "date-time",
      type: "string",
    },
    positions: {
      additionalProperties: {
        type: "string",
      },
      description:
        "A map from categories to public nomination IDs. Find these by accessing your ballot.",
      examples: [
        {
          president: "01996ae6-31e5-7bc6-bac4-399ffc8c80de",
          secretary: "01996ae6-31e5-7bc6-bac4-399ffc8c80de",
        },
      ],
      type: "object",
    },
    updated_at: {
      examples: ["2024-01-15T10:30:00Z"],
      format: "date-time",
      type: "string",
    },
  },
  required: ["positions", "created_at", "updated_at"],
  type: "object",
} as const;

export const CreateElectionInputBodyWritableSchema = {
  additionalProperties: false,
  properties: {
    name: {
      description: "Election name",
      type: "string",
    },
  },
  required: ["name"],
  type: "object",
} as const;

export const CreateElectionResponseBodyWritableSchema = {
  additionalProperties: false,
  properties: {
    election_id: {
      description: "Election ID",
      type: "string",
    },
  },
  required: ["election_id"],
  type: "object",
} as const;

export const ElectionMemberListSetInputBodyWritableSchema = {
  additionalProperties: false,
  properties: {
    zids: {
      description: "User zIDs",
      examples: [["z0000000"]],
      items: {
        type: "string",
      },
      type: ["array", "null"],
    },
  },
  required: ["zids"],
  type: "object",
} as const;

export const ErrorModelWritableSchema = {
  additionalProperties: false,
  properties: {
    detail: {
      description: "A human-readable explanation specific to this occurrence of the problem.",
      examples: ["Property foo is required but is missing."],
      type: "string",
    },
    errors: {
      description: "Optional list of individual error details",
      items: {
        $ref: "#/components/schemas/ErrorDetail",
      },
      type: ["array", "null"],
    },
    instance: {
      description: "A URI reference that identifies the specific occurrence of the problem.",
      examples: ["https://example.com/error-log/abc123"],
      format: "uri",
      type: "string",
    },
    status: {
      description: "HTTP status code",
      examples: [400],
      format: "int64",
      type: "integer",
    },
    title: {
      description:
        "A short, human-readable summary of the problem type. This value should not change between occurrences of the error.",
      examples: ["Bad Request"],
      type: "string",
    },
    type: {
      default: "about:blank",
      description: "A URI reference to human-readable documentation for the error.",
      examples: ["https://example.com/errors/example"],
      format: "uri",
      type: "string",
    },
  },
  type: "object",
} as const;

export const GenerateOTPInputBodyWritableSchema = {
  additionalProperties: false,
  properties: {
    zid: {
      description: "User zID",
      examples: ["z0000000"],
      pattern: "^z[0-9]{7}$",
      type: "string",
    },
  },
  required: ["zid"],
  type: "object",
} as const;

export const GetElectionStateResponseBodyWritableSchema = {
  additionalProperties: false,
  properties: {
    election_id: {
      description: "Election ID. Only set if an election is running.",
      type: "string",
    },
    state: {
      enum: [
        "NO_ELECTION",
        "CLOSED",
        "NOMINATIONS_OPEN",
        "NOMINATIONS_CLOSED",
        "VOTING_OPEN",
        "VOTING_CLOSED",
        "RESULTS",
        "END",
      ],
      type: "string",
    },
    state_created_at: {
      description:
        "Timestamp when the election first entered this state. Only Set if an election is running.",
      examples: ["2024-01-15T10:30:00Z"],
      format: "date-time",
      type: "string",
    },
  },
  required: ["state"],
  type: "object",
} as const;

export const HealthOutputWritableSchema = {
  additionalProperties: false,
  properties: {
    checked: {
      format: "date-time",
      type: "string",
    },
    details: {
      additionalProperties: {
        $ref: "#/components/schemas/CheckResult",
      },
      type: "object",
    },
    health_status: {
      enum: ["up", "down", "unknown"],
      examples: ["up"],
      type: "string",
    },
    info: {
      additionalProperties: {},
      type: "object",
    },
  },
  required: ["health_status", "checked"],
  type: "object",
} as const;

export const NominationWritableSchema = {
  additionalProperties: false,
  properties: {
    candidate_name: {
      examples: ["John Doe"],
      type: "string",
    },
    candidate_statement: {
      examples: ["I am running for president because..."],
      type: "string",
    },
    candidate_zid: {
      examples: ["z1234567"],
      type: "string",
    },
    contact_email: {
      examples: ["john@example.com"],
      type: "string",
    },
    created_at: {
      examples: ["2024-01-15T10:30:00Z"],
      format: "date-time",
      type: "string",
    },
    discord_username: {
      examples: ["johndoe"],
      type: "string",
    },
    election_id: {
      type: "string",
    },
    executive_roles: {
      examples: [["president", "secretary"]],
      items: {
        type: "string",
      },
      type: ["array", "null"],
    },
    nomination_id: {
      type: "string",
    },
    updated_at: {
      examples: ["2024-01-15T10:30:00Z"],
      format: "date-time",
      type: "string",
    },
    url: {
      examples: ["https://johndoe.com"],
      type: "string",
    },
  },
  required: [
    "nomination_id",
    "election_id",
    "candidate_zid",
    "candidate_name",
    "contact_email",
    "discord_username",
    "executive_roles",
    "candidate_statement",
    "created_at",
    "updated_at",
  ],
  type: "object",
} as const;

export const PublicBallotWritableSchema = {
  additionalProperties: false,
  properties: {
    candidates: {
      additionalProperties: {
        items: {
          $ref: "#/components/schemas/PublicNominationWritable",
        },
        type: ["array", "null"],
      },
      description: "Map of executive role to list of candidates running for that role",
      examples: [
        {
          president: [],
          secretary: [],
        },
      ],
      type: "object",
    },
    election_id: {
      description: "Election ID",
      examples: ["1"],
      type: "string",
    },
    has_voted: {
      description: "Whether the current user has already voted in this election",
      type: "boolean",
    },
  },
  required: ["election_id", "candidates", "has_voted"],
  type: "object",
} as const;

export const PublicNominationWritableSchema = {
  additionalProperties: false,
  properties: {
    candidate_name: {
      examples: ["John Doe"],
      type: "string",
    },
    candidate_statement: {
      examples: ["I am running for president because..."],
      type: "string",
    },
    created_at: {
      examples: ["2024-01-15T10:30:00Z"],
      format: "date-time",
      type: "string",
    },
    discord_username: {
      examples: ["johndoe"],
      type: "string",
    },
    election_id: {
      type: "string",
    },
    executive_roles: {
      examples: [["president", "secretary"]],
      items: {
        type: "string",
      },
      type: ["array", "null"],
    },
    nomination_id: {
      type: "string",
    },
    updated_at: {
      examples: ["2024-01-15T10:30:00Z"],
      format: "date-time",
      type: "string",
    },
    url: {
      examples: ["https://johndoe.com"],
      type: "string",
    },
  },
  required: [
    "nomination_id",
    "election_id",
    "candidate_name",
    "discord_username",
    "executive_roles",
    "candidate_statement",
    "created_at",
    "updated_at",
  ],
  type: "object",
} as const;

export const SubmitNominationWritableSchema = {
  additionalProperties: false,
  properties: {
    candidate_name: {
      examples: ["John Doe"],
      maxLength: 100,
      minLength: 2,
      type: "string",
    },
    candidate_statement: {
      examples: ["I am running for president because..."],
      maxLength: 2000,
      minLength: 50,
      type: "string",
    },
    contact_email: {
      examples: ["john@example.com"],
      format: "email",
      type: "string",
    },
    discord_username: {
      examples: ["johndoe"],
      maxLength: 32,
      type: "string",
    },
    executive_roles: {
      examples: [["president", "secretary"]],
      items: {
        enum: [
          "president",
          "secretary",
          "treasurer",
          "arc_delegate",
          "edi_officer",
          "grievance_officer",
        ],
        type: "string",
      },
      maxItems: 6,
      minItems: 1,
      type: ["array", "null"],
      uniqueItems: true,
    },
    url: {
      examples: ["https://johndoe.com"],
      format: "uri",
      type: "string",
    },
  },
  required: [
    "candidate_name",
    "contact_email",
    "discord_username",
    "executive_roles",
    "candidate_statement",
  ],
  type: "object",
} as const;

export const SubmitNominationResponseBodyWritableSchema = {
  additionalProperties: false,
  properties: {
    nomination_id: {
      description: "Public nomination ID",
      examples: ["abc123"],
      type: "string",
    },
  },
  required: ["nomination_id"],
  type: "object",
} as const;

export const SubmitOTPInputBodyWritableSchema = {
  additionalProperties: false,
  properties: {
    otp: {
      description: "OTP Code",
      examples: ["123123"],
      pattern: "^[0-9]{6}$",
      type: "string",
    },
    zid: {
      description: "User zID",
      examples: ["z0000000"],
      pattern: "^z[0-9]{7}$",
      type: "string",
    },
  },
  required: ["zid", "otp"],
  type: "object",
} as const;

export const SubmitOTPResponseBodyWritableSchema = {
  additionalProperties: false,
  properties: {
    expiry: {
      description: "Timestamp when your session expires.",
      examples: ["2024-01-15T10:30:00Z"],
      format: "date-time",
      type: "string",
    },
    is_admin: {
      description: "Admin status",
      type: "boolean",
    },
    zid: {
      description: "User zID",
      examples: ["z0000000"],
      pattern: "^z[0-9]{7}$",
      type: "string",
    },
  },
  required: ["zid", "expiry", "is_admin"],
  type: "object",
} as const;

export const SubmitVoteBodyWritableSchema = {
  additionalProperties: false,
  properties: {
    positions: {
      additionalProperties: {
        type: "string",
      },
      description:
        "A map from categories to public nomination IDs. Find these by accessing your ballot.",
      examples: [
        {
          president: "01996ae6-31e5-7bc6-bac4-399ffc8c80de",
          secretary: "01996ae6-31e5-7bc6-bac4-399ffc8c80de",
        },
      ],
      type: "object",
    },
  },
  required: ["positions"],
  type: "object",
} as const;

export const TransitionElectionStateBodyWritableSchema = {
  additionalProperties: false,
  properties: {
    state: {
      description: "State to transition to",
      enum: [
        "CLOSED",
        "NOMINATIONS_OPEN",
        "NOMINATIONS_CLOSED",
        "VOTING_OPEN",
        "VOTING_CLOSED",
        "RESULTS",
        "END",
      ],
      type: "string",
    },
  },
  required: ["state"],
  type: "object",
} as const;

export const VoteWritableSchema = {
  additionalProperties: false,
  properties: {
    created_at: {
      examples: ["2024-01-15T10:30:00Z"],
      format: "date-time",
      type: "string",
    },
    positions: {
      additionalProperties: {
        type: "string",
      },
      description:
        "A map from categories to public nomination IDs. Find these by accessing your ballot.",
      examples: [
        {
          president: "01996ae6-31e5-7bc6-bac4-399ffc8c80de",
          secretary: "01996ae6-31e5-7bc6-bac4-399ffc8c80de",
        },
      ],
      type: "object",
    },
    updated_at: {
      examples: ["2024-01-15T10:30:00Z"],
      format: "date-time",
      type: "string",
    },
  },
  required: ["positions", "created_at", "updated_at"],
  type: "object",
} as const;
