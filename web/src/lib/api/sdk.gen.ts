// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Client, TDataShape } from './client';
import type { CreateElectionData, CreateElectionResponses, CreateElectionErrors, AdminGetElectionStateData, AdminGetElectionStateResponses, AdminGetElectionStateErrors, AdminTransitionElectionStateData, AdminTransitionElectionStateResponses, AdminTransitionElectionStateErrors, SetElectionMembersData, SetElectionMembersResponses, SetElectionMembersErrors, GetNominationData, GetNominationResponses, GetNominationErrors, SubmitNominationData, SubmitNominationResponses, SubmitNominationErrors, GenerateOtpData, GenerateOtpResponses, GenerateOtpErrors, SubmitOtpData, SubmitOtpResponses, SubmitOtpErrors, StateData, StateResponses, StateErrors, GetHealthData, GetHealthResponses, GetHealthErrors } from './types.gen';
import { client } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Create an election
 */
export const createElection = <ThrowOnError extends boolean = false>(options: Options<CreateElectionData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateElectionResponses, CreateElectionErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'SESSION',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/elections',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the current election state
 */
export const adminGetElectionState = <ThrowOnError extends boolean = false>(options?: Options<AdminGetElectionStateData, ThrowOnError>) => {
    return (options?.client ?? client).get<AdminGetElectionStateResponses, AdminGetElectionStateErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'SESSION',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/elections/state',
        ...options
    });
};

/**
 * Transition the election state
 */
export const adminTransitionElectionState = <ThrowOnError extends boolean = false>(options: Options<AdminTransitionElectionStateData, ThrowOnError>) => {
    return (options.client ?? client).put<AdminTransitionElectionStateResponses, AdminTransitionElectionStateErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'SESSION',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/elections/state',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Set the member list for an election
 */
export const setElectionMembers = <ThrowOnError extends boolean = false>(options: Options<SetElectionMembersData, ThrowOnError>) => {
    return (options.client ?? client).put<SetElectionMembersResponses, SetElectionMembersErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'SESSION',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/elections/{election_id}/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get self-nomination
 * Retrieves an existing self-nomination (if any) for the current election.
 */
export const getNomination = <ThrowOnError extends boolean = false>(options?: Options<GetNominationData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNominationResponses, GetNominationErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'SESSION',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/nomination',
        ...options
    });
};

/**
 * Submit self-nomination
 * Creates a self-nomination for the current election, replacing an existing one.
 */
export const submitNomination = <ThrowOnError extends boolean = false>(options: Options<SubmitNominationData, ThrowOnError>) => {
    return (options.client ?? client).put<SubmitNominationResponses, SubmitNominationErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'SESSION',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/nomination',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Generate an OTP code
 */
export const generateOtp = <ThrowOnError extends boolean = false>(options: Options<GenerateOtpData, ThrowOnError>) => {
    return (options.client ?? client).post<GenerateOtpResponses, GenerateOtpErrors, ThrowOnError>({
        url: '/api/v1/otp/generate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Submit an OTP to enter a session
 */
export const submitOtp = <ThrowOnError extends boolean = false>(options: Options<SubmitOtpData, ThrowOnError>) => {
    return (options.client ?? client).post<SubmitOtpResponses, SubmitOtpErrors, ThrowOnError>({
        url: '/api/v1/otp/submit',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get State (SSE)
 * Gets current election state changes as server sent events.
 */
export const state = <ThrowOnError extends boolean = false>(options?: Options<StateData, ThrowOnError>) => {
    return (options?.client ?? client).sse.get<StateResponses, StateErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'SESSION',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/state',
        ...options
    });
};

/**
 * Get health
 */
export const getHealth = <ThrowOnError extends boolean = false>(options?: Options<GetHealthData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetHealthResponses, GetHealthErrors, ThrowOnError>({
        url: '/health',
        ...options
    });
};
