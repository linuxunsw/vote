// This file is auto-generated by @hey-api/openapi-ts

export type CheckResult = {
    error?: unknown;
    status: string;
    timestamp?: string;
};

export type CreateElectionInputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Election name
     */
    name: string;
};

export type CreateElectionResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Election ID
     */
    election_id: string;
};

export type ElectionMemberListSetInputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * User zIDs
     */
    zids: Array<string> | null;
};

export type ErrorDetail = {
    /**
     * Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
     */
    location?: string;
    /**
     * Error message text
     */
    message?: string;
    /**
     * The value at the given location
     */
    value?: unknown;
};

export type ErrorModel = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail?: string;
    /**
     * Optional list of individual error details
     */
    errors?: Array<ErrorDetail> | null;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string;
    /**
     * HTTP status code
     */
    status?: number;
    /**
     * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
     */
    title?: string;
    /**
     * A URI reference to human-readable documentation for the error.
     */
    type?: string;
};

export type GenerateOtpInputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * User zID
     */
    zid: string;
};

export type GetElectionStateResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Election ID. Only set if an election is running.
     */
    election_id?: string;
    state: 'NO_ELECTION' | 'CLOSED' | 'NOMINATIONS_OPEN' | 'NOMINATIONS_CLOSED' | 'VOTING_OPEN' | 'VOTING_CLOSED' | 'RESULTS' | 'END';
    /**
     * Timestamp when the election first entered this state. Only Set if an election is running.
     */
    state_created_at?: string;
};

export type HealthOutput = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    checked: string;
    details?: {
        [key: string]: CheckResult;
    };
    health_status: 'up' | 'down' | 'unknown';
    info?: {
        [key: string]: unknown;
    };
};

export type Nomination = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    candidate_name: string;
    candidate_statement: string;
    candidate_zid: string;
    contact_email: string;
    created_at: string;
    discord_username: string;
    election_id: string;
    executive_roles: Array<string> | null;
    updated_at: string;
    url?: string;
};

export type StateChangeEvent = {
    new_state: 'CLOSED' | 'NOMINATIONS_OPEN' | 'NOMINATIONS_CLOSED' | 'VOTING_OPEN' | 'VOTING_CLOSED' | 'RESULTS' | 'END';
};

export type SubmitNomination = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    candidate_name: string;
    candidate_statement: string;
    contact_email: string;
    discord_username: string;
    executive_roles: Array<'president' | 'secretary' | 'treasurer' | 'arc_delegate' | 'edi_officer' | 'grievance_officer'> | null;
    url?: string;
};

export type SubmitOtpInputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * OTP Code
     */
    otp: string;
    /**
     * User zID
     */
    zid: string;
};

export type SubmitOtpResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Timestamp when your session expires.
     */
    expiry: string;
    /**
     * Admin status
     */
    is_admin: boolean;
    /**
     * User zID
     */
    zid: string;
};

export type TransitionElectionStateBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * State to transition to
     */
    state: 'CLOSED' | 'NOMINATIONS_OPEN' | 'NOMINATIONS_CLOSED' | 'VOTING_OPEN' | 'VOTING_CLOSED' | 'RESULTS' | 'END';
};

export type CreateElectionInputBodyWritable = {
    /**
     * Election name
     */
    name: string;
};

export type CreateElectionResponseBodyWritable = {
    /**
     * Election ID
     */
    election_id: string;
};

export type ElectionMemberListSetInputBodyWritable = {
    /**
     * User zIDs
     */
    zids: Array<string> | null;
};

export type ErrorModelWritable = {
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail?: string;
    /**
     * Optional list of individual error details
     */
    errors?: Array<ErrorDetail> | null;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string;
    /**
     * HTTP status code
     */
    status?: number;
    /**
     * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
     */
    title?: string;
    /**
     * A URI reference to human-readable documentation for the error.
     */
    type?: string;
};

export type GenerateOtpInputBodyWritable = {
    /**
     * User zID
     */
    zid: string;
};

export type GetElectionStateResponseBodyWritable = {
    /**
     * Election ID. Only set if an election is running.
     */
    election_id?: string;
    state: 'NO_ELECTION' | 'CLOSED' | 'NOMINATIONS_OPEN' | 'NOMINATIONS_CLOSED' | 'VOTING_OPEN' | 'VOTING_CLOSED' | 'RESULTS' | 'END';
    /**
     * Timestamp when the election first entered this state. Only Set if an election is running.
     */
    state_created_at?: string;
};

export type HealthOutputWritable = {
    checked: string;
    details?: {
        [key: string]: CheckResult;
    };
    health_status: 'up' | 'down' | 'unknown';
    info?: {
        [key: string]: unknown;
    };
};

export type NominationWritable = {
    candidate_name: string;
    candidate_statement: string;
    candidate_zid: string;
    contact_email: string;
    created_at: string;
    discord_username: string;
    election_id: string;
    executive_roles: Array<string> | null;
    updated_at: string;
    url?: string;
};

export type SubmitNominationWritable = {
    candidate_name: string;
    candidate_statement: string;
    contact_email: string;
    discord_username: string;
    executive_roles: Array<'president' | 'secretary' | 'treasurer' | 'arc_delegate' | 'edi_officer' | 'grievance_officer'> | null;
    url?: string;
};

export type SubmitOtpInputBodyWritable = {
    /**
     * OTP Code
     */
    otp: string;
    /**
     * User zID
     */
    zid: string;
};

export type SubmitOtpResponseBodyWritable = {
    /**
     * Timestamp when your session expires.
     */
    expiry: string;
    /**
     * Admin status
     */
    is_admin: boolean;
    /**
     * User zID
     */
    zid: string;
};

export type TransitionElectionStateBodyWritable = {
    /**
     * State to transition to
     */
    state: 'CLOSED' | 'NOMINATIONS_OPEN' | 'NOMINATIONS_CLOSED' | 'VOTING_OPEN' | 'VOTING_CLOSED' | 'RESULTS' | 'END';
};

export type CreateElectionData = {
    body: CreateElectionInputBodyWritable;
    path?: never;
    query?: never;
    url: '/api/v1/elections';
};

export type CreateElectionErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type CreateElectionError = CreateElectionErrors[keyof CreateElectionErrors];

export type CreateElectionResponses = {
    /**
     * OK
     */
    200: CreateElectionResponseBody;
};

export type CreateElectionResponse = CreateElectionResponses[keyof CreateElectionResponses];

export type AdminGetElectionStateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/elections/state';
};

export type AdminGetElectionStateErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type AdminGetElectionStateError = AdminGetElectionStateErrors[keyof AdminGetElectionStateErrors];

export type AdminGetElectionStateResponses = {
    /**
     * OK
     */
    200: GetElectionStateResponseBody;
};

export type AdminGetElectionStateResponse = AdminGetElectionStateResponses[keyof AdminGetElectionStateResponses];

export type AdminTransitionElectionStateData = {
    body: TransitionElectionStateBodyWritable;
    path?: never;
    query?: never;
    url: '/api/v1/elections/state';
};

export type AdminTransitionElectionStateErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type AdminTransitionElectionStateError = AdminTransitionElectionStateErrors[keyof AdminTransitionElectionStateErrors];

export type AdminTransitionElectionStateResponses = {
    /**
     * No Content
     */
    204: void;
};

export type AdminTransitionElectionStateResponse = AdminTransitionElectionStateResponses[keyof AdminTransitionElectionStateResponses];

export type SetElectionMembersData = {
    body: ElectionMemberListSetInputBodyWritable;
    path: {
        /**
         * Election ID
         */
        election_id: string;
    };
    query?: never;
    url: '/api/v1/elections/{election_id}/members';
};

export type SetElectionMembersErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type SetElectionMembersError = SetElectionMembersErrors[keyof SetElectionMembersErrors];

export type SetElectionMembersResponses = {
    /**
     * No Content
     */
    204: void;
};

export type SetElectionMembersResponse = SetElectionMembersResponses[keyof SetElectionMembersResponses];

export type GetNominationData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/nomination';
};

export type GetNominationErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type GetNominationError = GetNominationErrors[keyof GetNominationErrors];

export type GetNominationResponses = {
    /**
     * OK
     */
    200: Nomination;
};

export type GetNominationResponse = GetNominationResponses[keyof GetNominationResponses];

export type SubmitNominationData = {
    body: SubmitNominationWritable;
    path?: never;
    query?: never;
    url: '/api/v1/nomination';
};

export type SubmitNominationErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type SubmitNominationError = SubmitNominationErrors[keyof SubmitNominationErrors];

export type SubmitNominationResponses = {
    /**
     * No Content
     */
    204: void;
};

export type SubmitNominationResponse = SubmitNominationResponses[keyof SubmitNominationResponses];

export type GenerateOtpData = {
    body: GenerateOtpInputBodyWritable;
    path?: never;
    query?: never;
    url: '/api/v1/otp/generate';
};

export type GenerateOtpErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type GenerateOtpError = GenerateOtpErrors[keyof GenerateOtpErrors];

export type GenerateOtpResponses = {
    /**
     * No Content
     */
    204: void;
};

export type GenerateOtpResponse = GenerateOtpResponses[keyof GenerateOtpResponses];

export type SubmitOtpData = {
    body: SubmitOtpInputBodyWritable;
    path?: never;
    query?: never;
    url: '/api/v1/otp/submit';
};

export type SubmitOtpErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type SubmitOtpError = SubmitOtpErrors[keyof SubmitOtpErrors];

export type SubmitOtpResponses = {
    /**
     * OK
     */
    200: SubmitOtpResponseBody;
};

export type SubmitOtpResponse = SubmitOtpResponses[keyof SubmitOtpResponses];

export type StateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/state';
};

export type StateErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type StateError = StateErrors[keyof StateErrors];

export type StateResponses = {
    /**
     * Server Sent Events
     * Each oneOf object in the array represents one possible Server Sent Events (SSE) message, serialized as UTF-8 text according to the SSE specification.
     */
    200: Array<{
        data: StateChangeEvent;
        /**
         * The event name.
         */
        event: 'stateChange';
        /**
         * The event ID.
         */
        id?: number;
        /**
         * The retry time in milliseconds.
         */
        retry?: number;
    }>;
};

export type StateResponse = StateResponses[keyof StateResponses];

export type GetHealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type GetHealthErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type GetHealthError = GetHealthErrors[keyof GetHealthErrors];

export type GetHealthResponses = {
    /**
     * OK
     */
    200: HealthOutput;
};

export type GetHealthResponse = GetHealthResponses[keyof GetHealthResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:8888' | (string & {});
};
