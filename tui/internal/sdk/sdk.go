// Package sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package sdk

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Defines values for GetElectionStateResponseBodyState.
const (
	GetElectionStateResponseBodyStateCLOSED            GetElectionStateResponseBodyState = "CLOSED"
	GetElectionStateResponseBodyStateEND               GetElectionStateResponseBodyState = "END"
	GetElectionStateResponseBodyStateNOELECTION        GetElectionStateResponseBodyState = "NO_ELECTION"
	GetElectionStateResponseBodyStateNOMINATIONSCLOSED GetElectionStateResponseBodyState = "NOMINATIONS_CLOSED"
	GetElectionStateResponseBodyStateNOMINATIONSOPEN   GetElectionStateResponseBodyState = "NOMINATIONS_OPEN"
	GetElectionStateResponseBodyStateRESULTS           GetElectionStateResponseBodyState = "RESULTS"
	GetElectionStateResponseBodyStateVOTINGCLOSED      GetElectionStateResponseBodyState = "VOTING_CLOSED"
	GetElectionStateResponseBodyStateVOTINGOPEN        GetElectionStateResponseBodyState = "VOTING_OPEN"
)

// Defines values for NominationExecutiveRoles.
const (
	NominationExecutiveRolesArcDelegate      NominationExecutiveRoles = "arc_delegate"
	NominationExecutiveRolesEdiOfficer       NominationExecutiveRoles = "edi_officer"
	NominationExecutiveRolesGrievanceOfficer NominationExecutiveRoles = "grievance_officer"
	NominationExecutiveRolesPresident        NominationExecutiveRoles = "president"
	NominationExecutiveRolesSecretary        NominationExecutiveRoles = "secretary"
	NominationExecutiveRolesTreasurer        NominationExecutiveRoles = "treasurer"
)

// Defines values for SubmitNominationExecutiveRoles.
const (
	SubmitNominationExecutiveRolesArcDelegate      SubmitNominationExecutiveRoles = "arc_delegate"
	SubmitNominationExecutiveRolesEdiOfficer       SubmitNominationExecutiveRoles = "edi_officer"
	SubmitNominationExecutiveRolesGrievanceOfficer SubmitNominationExecutiveRoles = "grievance_officer"
	SubmitNominationExecutiveRolesPresident        SubmitNominationExecutiveRoles = "president"
	SubmitNominationExecutiveRolesSecretary        SubmitNominationExecutiveRoles = "secretary"
	SubmitNominationExecutiveRolesTreasurer        SubmitNominationExecutiveRoles = "treasurer"
)

// Defines values for TransitionElectionStateBodyState.
const (
	TransitionElectionStateBodyStateCLOSED            TransitionElectionStateBodyState = "CLOSED"
	TransitionElectionStateBodyStateEND               TransitionElectionStateBodyState = "END"
	TransitionElectionStateBodyStateNOMINATIONSCLOSED TransitionElectionStateBodyState = "NOMINATIONS_CLOSED"
	TransitionElectionStateBodyStateNOMINATIONSOPEN   TransitionElectionStateBodyState = "NOMINATIONS_OPEN"
	TransitionElectionStateBodyStateRESULTS           TransitionElectionStateBodyState = "RESULTS"
	TransitionElectionStateBodyStateVOTINGCLOSED      TransitionElectionStateBodyState = "VOTING_CLOSED"
	TransitionElectionStateBodyStateVOTINGOPEN        TransitionElectionStateBodyState = "VOTING_OPEN"
)

// CreateElectionInputBody defines model for CreateElectionInputBody.
type CreateElectionInputBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Name Election name
	Name string `json:"name"`
}

// CreateElectionResponseBody defines model for CreateElectionResponseBody.
type CreateElectionResponseBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// ElectionId Election ID
	ElectionId string `json:"election_id"`
}

// ElectionMemberListSetInputBody defines model for ElectionMemberListSetInputBody.
type ElectionMemberListSetInputBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Zids User zIDs
	Zids *[]string `json:"zids"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// Location Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
	Location *string `json:"location,omitempty"`

	// Message Error message text
	Message *string `json:"message,omitempty"`

	// Value The value at the given location
	Value interface{} `json:"value,omitempty"`
}

// ErrorModel defines model for ErrorModel.
type ErrorModel struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Errors Optional list of individual error details
	Errors *[]ErrorDetail `json:"errors"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance *string `json:"instance,omitempty"`

	// Status HTTP status code
	Status *int64 `json:"status,omitempty"`

	// Title A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
	Title *string `json:"title,omitempty"`

	// Type A URI reference to human-readable documentation for the error.
	Type *string `json:"type,omitempty"`
}

// GenerateOTPInputBody defines model for GenerateOTPInputBody.
type GenerateOTPInputBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Zid User zID
	Zid string `json:"zid"`
}

// GetElectionStateResponseBody defines model for GetElectionStateResponseBody.
type GetElectionStateResponseBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// ElectionId Election ID. Only set if an election is running.
	ElectionId *string                           `json:"election_id,omitempty"`
	State      GetElectionStateResponseBodyState `json:"state"`

	// StateCreatedAt Timestamp when the election first entered this state. Only Set if an election is running.
	StateCreatedAt *time.Time `json:"state_created_at,omitempty"`
}

// GetElectionStateResponseBodyState defines model for GetElectionStateResponseBody.State.
type GetElectionStateResponseBodyState string

// Nomination defines model for Nomination.
type Nomination struct {
	// Schema A URL to the JSON Schema for this object.
	Schema             *string                     `json:"$schema,omitempty"`
	CandidateName      string                      `json:"candidate_name"`
	CandidateStatement string                      `json:"candidate_statement"`
	CandidateZid       string                      `json:"candidate_zid"`
	ContactEmail       string                      `json:"contact_email"`
	CreatedAt          time.Time                   `json:"created_at"`
	DiscordUsername    string                      `json:"discord_username"`
	ElectionId         string                      `json:"election_id"`
	ExecutiveRoles     *[]NominationExecutiveRoles `json:"executive_roles"`
	NominationId       string                      `json:"nomination_id"`
	UpdatedAt          time.Time                   `json:"updated_at"`
	Url                *string                     `json:"url,omitempty"`
}

// NominationExecutiveRoles defines model for Nomination.ExecutiveRoles.
type NominationExecutiveRoles string

// PublicBallot defines model for PublicBallot.
type PublicBallot struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Candidates Map of executive role to list of candidates running for that role
	Candidates map[string]*[]PublicNomination `json:"candidates"`

	// ElectionId Election ID
	ElectionId string `json:"election_id"`

	// HasVoted Whether the current user has already voted in this election
	HasVoted bool `json:"has_voted"`
}

// PublicNomination defines model for PublicNomination.
type PublicNomination struct {
	// Schema A URL to the JSON Schema for this object.
	Schema             *string   `json:"$schema,omitempty"`
	CandidateName      string    `json:"candidate_name"`
	CandidateStatement string    `json:"candidate_statement"`
	CreatedAt          time.Time `json:"created_at"`
	DiscordUsername    string    `json:"discord_username"`
	ElectionId         string    `json:"election_id"`
	ExecutiveRoles     *[]string `json:"executive_roles"`
	NominationId       string    `json:"nomination_id"`
	UpdatedAt          time.Time `json:"updated_at"`
	Url                *string   `json:"url,omitempty"`
}

// SubmitNomination defines model for SubmitNomination.
type SubmitNomination struct {
	// Schema A URL to the JSON Schema for this object.
	Schema             *string                           `json:"$schema,omitempty"`
	CandidateName      string                            `json:"candidate_name"`
	CandidateStatement string                            `json:"candidate_statement"`
	ContactEmail       openapi_types.Email               `json:"contact_email"`
	DiscordUsername    string                            `json:"discord_username"`
	ExecutiveRoles     *[]SubmitNominationExecutiveRoles `json:"executive_roles"`
	Url                *string                           `json:"url,omitempty"`
}

// SubmitNominationExecutiveRoles defines model for SubmitNomination.ExecutiveRoles.
type SubmitNominationExecutiveRoles string

// SubmitNominationResponseBody defines model for SubmitNominationResponseBody.
type SubmitNominationResponseBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// NominationId Public nomination ID
	NominationId string `json:"nomination_id"`
}

// SubmitOTPInputBody defines model for SubmitOTPInputBody.
type SubmitOTPInputBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Otp OTP Code
	Otp string `json:"otp"`

	// Zid User zID
	Zid string `json:"zid"`
}

// SubmitOTPResponseBody defines model for SubmitOTPResponseBody.
type SubmitOTPResponseBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Expiry Timestamp when your session expires.
	Expiry time.Time `json:"expiry"`

	// IsAdmin Admin status
	IsAdmin bool `json:"is_admin"`

	// Zid User zID
	Zid string `json:"zid"`
}

// SubmitVoteBody defines model for SubmitVoteBody.
type SubmitVoteBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Positions A map from categories to public nomination IDs. Find these by accessing your ballot.
	Positions map[string]string `json:"positions"`
}

// TransitionElectionStateBody defines model for TransitionElectionStateBody.
type TransitionElectionStateBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// State State to transition to
	State TransitionElectionStateBodyState `json:"state"`
}

// TransitionElectionStateBodyState State to transition to
type TransitionElectionStateBodyState string

// Vote defines model for Vote.
type Vote struct {
	// Schema A URL to the JSON Schema for this object.
	Schema    *string   `json:"$schema,omitempty"`
	CreatedAt time.Time `json:"created_at"`

	// Positions A map from categories to public nomination IDs. Find these by accessing your ballot.
	Positions map[string]string `json:"positions"`
	UpdatedAt time.Time         `json:"updated_at"`
}

// CreateElectionJSONRequestBody defines body for CreateElection for application/json ContentType.
type CreateElectionJSONRequestBody = CreateElectionInputBody

// SetElectionMembersJSONRequestBody defines body for SetElectionMembers for application/json ContentType.
type SetElectionMembersJSONRequestBody = ElectionMemberListSetInputBody

// SubmitNominationJSONRequestBody defines body for SubmitNomination for application/json ContentType.
type SubmitNominationJSONRequestBody = SubmitNomination

// GenerateOtpJSONRequestBody defines body for GenerateOtp for application/json ContentType.
type GenerateOtpJSONRequestBody = GenerateOTPInputBody

// SubmitOtpJSONRequestBody defines body for SubmitOtp for application/json ContentType.
type SubmitOtpJSONRequestBody = SubmitOTPInputBody

// AdminTransitionElectionStateJSONRequestBody defines body for AdminTransitionElectionState for application/json ContentType.
type AdminTransitionElectionStateJSONRequestBody = TransitionElectionStateBody

// SubmitVoteJSONRequestBody defines body for SubmitVote for application/json ContentType.
type SubmitVoteJSONRequestBody = SubmitVoteBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBallot request
	GetBallot(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateElectionWithBody request with any body
	CreateElectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateElection(ctx context.Context, body CreateElectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetElectionMembersWithBody request with any body
	SetElectionMembersWithBody(ctx context.Context, electionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetElectionMembers(ctx context.Context, electionId string, body SetElectionMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNomination request
	DeleteNomination(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNomination request
	GetNomination(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubmitNominationWithBody request with any body
	SubmitNominationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubmitNomination(ctx context.Context, body SubmitNominationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicNomination request
	GetPublicNomination(ctx context.Context, nominationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateOtpWithBody request with any body
	GenerateOtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GenerateOtp(ctx context.Context, body GenerateOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubmitOtpWithBody request with any body
	SubmitOtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubmitOtp(ctx context.Context, body SubmitOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetElectionState request
	GetElectionState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminTransitionElectionStateWithBody request with any body
	AdminTransitionElectionStateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminTransitionElectionState(ctx context.Context, body AdminTransitionElectionStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVote request
	DeleteVote(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVote request
	GetVote(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubmitVoteWithBody request with any body
	SubmitVoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubmitVote(ctx context.Context, body SubmitVoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetBallot(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBallotRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateElectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateElectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateElection(ctx context.Context, body CreateElectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateElectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetElectionMembersWithBody(ctx context.Context, electionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetElectionMembersRequestWithBody(c.Server, electionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetElectionMembers(ctx context.Context, electionId string, body SetElectionMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetElectionMembersRequest(c.Server, electionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNomination(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNominationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNomination(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNominationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitNominationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitNominationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitNomination(ctx context.Context, body SubmitNominationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitNominationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicNomination(ctx context.Context, nominationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicNominationRequest(c.Server, nominationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateOtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateOtpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateOtp(ctx context.Context, body GenerateOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateOtpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitOtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitOtpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitOtp(ctx context.Context, body SubmitOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitOtpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetElectionState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetElectionStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminTransitionElectionStateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminTransitionElectionStateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminTransitionElectionState(ctx context.Context, body AdminTransitionElectionStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminTransitionElectionStateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVote(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVoteRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVote(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVoteRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitVoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitVoteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitVote(ctx context.Context, body SubmitVoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitVoteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetBallotRequest generates requests for GetBallot
func NewGetBallotRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/ballot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateElectionRequest calls the generic CreateElection builder with application/json body
func NewCreateElectionRequest(server string, body CreateElectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateElectionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateElectionRequestWithBody generates requests for CreateElection with any type of body
func NewCreateElectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/elections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetElectionMembersRequest calls the generic SetElectionMembers builder with application/json body
func NewSetElectionMembersRequest(server string, electionId string, body SetElectionMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetElectionMembersRequestWithBody(server, electionId, "application/json", bodyReader)
}

// NewSetElectionMembersRequestWithBody generates requests for SetElectionMembers with any type of body
func NewSetElectionMembersRequestWithBody(server string, electionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "election_id", runtime.ParamLocationPath, electionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/elections/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNominationRequest generates requests for DeleteNomination
func NewDeleteNominationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/nomination")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNominationRequest generates requests for GetNomination
func NewGetNominationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/nomination")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubmitNominationRequest calls the generic SubmitNomination builder with application/json body
func NewSubmitNominationRequest(server string, body SubmitNominationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitNominationRequestWithBody(server, "application/json", bodyReader)
}

// NewSubmitNominationRequestWithBody generates requests for SubmitNomination with any type of body
func NewSubmitNominationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/nomination")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublicNominationRequest generates requests for GetPublicNomination
func NewGetPublicNominationRequest(server string, nominationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nomination_id", runtime.ParamLocationPath, nominationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/nomination/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGenerateOtpRequest calls the generic GenerateOtp builder with application/json body
func NewGenerateOtpRequest(server string, body GenerateOtpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGenerateOtpRequestWithBody(server, "application/json", bodyReader)
}

// NewGenerateOtpRequestWithBody generates requests for GenerateOtp with any type of body
func NewGenerateOtpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/otp/generate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSubmitOtpRequest calls the generic SubmitOtp builder with application/json body
func NewSubmitOtpRequest(server string, body SubmitOtpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitOtpRequestWithBody(server, "application/json", bodyReader)
}

// NewSubmitOtpRequestWithBody generates requests for SubmitOtp with any type of body
func NewSubmitOtpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/otp/submit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetElectionStateRequest generates requests for GetElectionState
func NewGetElectionStateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/state")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminTransitionElectionStateRequest calls the generic AdminTransitionElectionState builder with application/json body
func NewAdminTransitionElectionStateRequest(server string, body AdminTransitionElectionStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminTransitionElectionStateRequestWithBody(server, "application/json", bodyReader)
}

// NewAdminTransitionElectionStateRequestWithBody generates requests for AdminTransitionElectionState with any type of body
func NewAdminTransitionElectionStateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/state")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVoteRequest generates requests for DeleteVote
func NewDeleteVoteRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVoteRequest generates requests for GetVote
func NewGetVoteRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubmitVoteRequest calls the generic SubmitVote builder with application/json body
func NewSubmitVoteRequest(server string, body SubmitVoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitVoteRequestWithBody(server, "application/json", bodyReader)
}

// NewSubmitVoteRequestWithBody generates requests for SubmitVote with any type of body
func NewSubmitVoteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBallotWithResponse request
	GetBallotWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBallotResponse, error)

	// CreateElectionWithBodyWithResponse request with any body
	CreateElectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateElectionResponse, error)

	CreateElectionWithResponse(ctx context.Context, body CreateElectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateElectionResponse, error)

	// SetElectionMembersWithBodyWithResponse request with any body
	SetElectionMembersWithBodyWithResponse(ctx context.Context, electionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetElectionMembersResponse, error)

	SetElectionMembersWithResponse(ctx context.Context, electionId string, body SetElectionMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*SetElectionMembersResponse, error)

	// DeleteNominationWithResponse request
	DeleteNominationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteNominationResponse, error)

	// GetNominationWithResponse request
	GetNominationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNominationResponse, error)

	// SubmitNominationWithBodyWithResponse request with any body
	SubmitNominationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitNominationResponse, error)

	SubmitNominationWithResponse(ctx context.Context, body SubmitNominationJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitNominationResponse, error)

	// GetPublicNominationWithResponse request
	GetPublicNominationWithResponse(ctx context.Context, nominationId string, reqEditors ...RequestEditorFn) (*GetPublicNominationResponse, error)

	// GenerateOtpWithBodyWithResponse request with any body
	GenerateOtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateOtpResponse, error)

	GenerateOtpWithResponse(ctx context.Context, body GenerateOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateOtpResponse, error)

	// SubmitOtpWithBodyWithResponse request with any body
	SubmitOtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitOtpResponse, error)

	SubmitOtpWithResponse(ctx context.Context, body SubmitOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitOtpResponse, error)

	// GetElectionStateWithResponse request
	GetElectionStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetElectionStateResponse, error)

	// AdminTransitionElectionStateWithBodyWithResponse request with any body
	AdminTransitionElectionStateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminTransitionElectionStateResponse, error)

	AdminTransitionElectionStateWithResponse(ctx context.Context, body AdminTransitionElectionStateJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminTransitionElectionStateResponse, error)

	// DeleteVoteWithResponse request
	DeleteVoteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteVoteResponse, error)

	// GetVoteWithResponse request
	GetVoteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVoteResponse, error)

	// SubmitVoteWithBodyWithResponse request with any body
	SubmitVoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitVoteResponse, error)

	SubmitVoteWithResponse(ctx context.Context, body SubmitVoteJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitVoteResponse, error)
}

type GetBallotResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *PublicBallot
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetBallotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBallotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateElectionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *CreateElectionResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r CreateElectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateElectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetElectionMembersResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r SetElectionMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetElectionMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNominationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r DeleteNominationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNominationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNominationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Nomination
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetNominationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNominationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitNominationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SubmitNominationResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r SubmitNominationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitNominationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicNominationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *PublicNomination
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetPublicNominationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicNominationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateOtpResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GenerateOtpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateOtpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitOtpResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SubmitOTPResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r SubmitOtpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitOtpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetElectionStateResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *GetElectionStateResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetElectionStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetElectionStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminTransitionElectionStateResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r AdminTransitionElectionStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminTransitionElectionStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVoteResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r DeleteVoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVoteResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Vote
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetVoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitVoteResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r SubmitVoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitVoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBallotWithResponse request returning *GetBallotResponse
func (c *ClientWithResponses) GetBallotWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBallotResponse, error) {
	rsp, err := c.GetBallot(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBallotResponse(rsp)
}

// CreateElectionWithBodyWithResponse request with arbitrary body returning *CreateElectionResponse
func (c *ClientWithResponses) CreateElectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateElectionResponse, error) {
	rsp, err := c.CreateElectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateElectionResponse(rsp)
}

func (c *ClientWithResponses) CreateElectionWithResponse(ctx context.Context, body CreateElectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateElectionResponse, error) {
	rsp, err := c.CreateElection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateElectionResponse(rsp)
}

// SetElectionMembersWithBodyWithResponse request with arbitrary body returning *SetElectionMembersResponse
func (c *ClientWithResponses) SetElectionMembersWithBodyWithResponse(ctx context.Context, electionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetElectionMembersResponse, error) {
	rsp, err := c.SetElectionMembersWithBody(ctx, electionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetElectionMembersResponse(rsp)
}

func (c *ClientWithResponses) SetElectionMembersWithResponse(ctx context.Context, electionId string, body SetElectionMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*SetElectionMembersResponse, error) {
	rsp, err := c.SetElectionMembers(ctx, electionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetElectionMembersResponse(rsp)
}

// DeleteNominationWithResponse request returning *DeleteNominationResponse
func (c *ClientWithResponses) DeleteNominationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteNominationResponse, error) {
	rsp, err := c.DeleteNomination(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNominationResponse(rsp)
}

// GetNominationWithResponse request returning *GetNominationResponse
func (c *ClientWithResponses) GetNominationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNominationResponse, error) {
	rsp, err := c.GetNomination(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNominationResponse(rsp)
}

// SubmitNominationWithBodyWithResponse request with arbitrary body returning *SubmitNominationResponse
func (c *ClientWithResponses) SubmitNominationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitNominationResponse, error) {
	rsp, err := c.SubmitNominationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitNominationResponse(rsp)
}

func (c *ClientWithResponses) SubmitNominationWithResponse(ctx context.Context, body SubmitNominationJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitNominationResponse, error) {
	rsp, err := c.SubmitNomination(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitNominationResponse(rsp)
}

// GetPublicNominationWithResponse request returning *GetPublicNominationResponse
func (c *ClientWithResponses) GetPublicNominationWithResponse(ctx context.Context, nominationId string, reqEditors ...RequestEditorFn) (*GetPublicNominationResponse, error) {
	rsp, err := c.GetPublicNomination(ctx, nominationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicNominationResponse(rsp)
}

// GenerateOtpWithBodyWithResponse request with arbitrary body returning *GenerateOtpResponse
func (c *ClientWithResponses) GenerateOtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateOtpResponse, error) {
	rsp, err := c.GenerateOtpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateOtpResponse(rsp)
}

func (c *ClientWithResponses) GenerateOtpWithResponse(ctx context.Context, body GenerateOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateOtpResponse, error) {
	rsp, err := c.GenerateOtp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateOtpResponse(rsp)
}

// SubmitOtpWithBodyWithResponse request with arbitrary body returning *SubmitOtpResponse
func (c *ClientWithResponses) SubmitOtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitOtpResponse, error) {
	rsp, err := c.SubmitOtpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitOtpResponse(rsp)
}

func (c *ClientWithResponses) SubmitOtpWithResponse(ctx context.Context, body SubmitOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitOtpResponse, error) {
	rsp, err := c.SubmitOtp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitOtpResponse(rsp)
}

// GetElectionStateWithResponse request returning *GetElectionStateResponse
func (c *ClientWithResponses) GetElectionStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetElectionStateResponse, error) {
	rsp, err := c.GetElectionState(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetElectionStateResponse(rsp)
}

// AdminTransitionElectionStateWithBodyWithResponse request with arbitrary body returning *AdminTransitionElectionStateResponse
func (c *ClientWithResponses) AdminTransitionElectionStateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminTransitionElectionStateResponse, error) {
	rsp, err := c.AdminTransitionElectionStateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminTransitionElectionStateResponse(rsp)
}

func (c *ClientWithResponses) AdminTransitionElectionStateWithResponse(ctx context.Context, body AdminTransitionElectionStateJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminTransitionElectionStateResponse, error) {
	rsp, err := c.AdminTransitionElectionState(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminTransitionElectionStateResponse(rsp)
}

// DeleteVoteWithResponse request returning *DeleteVoteResponse
func (c *ClientWithResponses) DeleteVoteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteVoteResponse, error) {
	rsp, err := c.DeleteVote(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVoteResponse(rsp)
}

// GetVoteWithResponse request returning *GetVoteResponse
func (c *ClientWithResponses) GetVoteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVoteResponse, error) {
	rsp, err := c.GetVote(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVoteResponse(rsp)
}

// SubmitVoteWithBodyWithResponse request with arbitrary body returning *SubmitVoteResponse
func (c *ClientWithResponses) SubmitVoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitVoteResponse, error) {
	rsp, err := c.SubmitVoteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitVoteResponse(rsp)
}

func (c *ClientWithResponses) SubmitVoteWithResponse(ctx context.Context, body SubmitVoteJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitVoteResponse, error) {
	rsp, err := c.SubmitVote(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitVoteResponse(rsp)
}

// ParseGetBallotResponse parses an HTTP response from a GetBallotWithResponse call
func ParseGetBallotResponse(rsp *http.Response) (*GetBallotResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBallotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicBallot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateElectionResponse parses an HTTP response from a CreateElectionWithResponse call
func ParseCreateElectionResponse(rsp *http.Response) (*CreateElectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateElectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateElectionResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseSetElectionMembersResponse parses an HTTP response from a SetElectionMembersWithResponse call
func ParseSetElectionMembersResponse(rsp *http.Response) (*SetElectionMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetElectionMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteNominationResponse parses an HTTP response from a DeleteNominationWithResponse call
func ParseDeleteNominationResponse(rsp *http.Response) (*DeleteNominationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNominationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetNominationResponse parses an HTTP response from a GetNominationWithResponse call
func ParseGetNominationResponse(rsp *http.Response) (*GetNominationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNominationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Nomination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseSubmitNominationResponse parses an HTTP response from a SubmitNominationWithResponse call
func ParseSubmitNominationResponse(rsp *http.Response) (*SubmitNominationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitNominationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubmitNominationResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetPublicNominationResponse parses an HTTP response from a GetPublicNominationWithResponse call
func ParseGetPublicNominationResponse(rsp *http.Response) (*GetPublicNominationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicNominationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicNomination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGenerateOtpResponse parses an HTTP response from a GenerateOtpWithResponse call
func ParseGenerateOtpResponse(rsp *http.Response) (*GenerateOtpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateOtpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseSubmitOtpResponse parses an HTTP response from a SubmitOtpWithResponse call
func ParseSubmitOtpResponse(rsp *http.Response) (*SubmitOtpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitOtpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubmitOTPResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetElectionStateResponse parses an HTTP response from a GetElectionStateWithResponse call
func ParseGetElectionStateResponse(rsp *http.Response) (*GetElectionStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetElectionStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetElectionStateResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseAdminTransitionElectionStateResponse parses an HTTP response from a AdminTransitionElectionStateWithResponse call
func ParseAdminTransitionElectionStateResponse(rsp *http.Response) (*AdminTransitionElectionStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminTransitionElectionStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteVoteResponse parses an HTTP response from a DeleteVoteWithResponse call
func ParseDeleteVoteResponse(rsp *http.Response) (*DeleteVoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetVoteResponse parses an HTTP response from a GetVoteWithResponse call
func ParseGetVoteResponse(rsp *http.Response) (*GetVoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Vote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseSubmitVoteResponse parses an HTTP response from a SubmitVoteWithResponse call
func ParseSubmitVoteResponse(rsp *http.Response) (*SubmitVoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitVoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}
