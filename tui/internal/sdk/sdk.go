// Package sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package sdk

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Defines values for HealthOutputHealthStatus.
const (
	Down    HealthOutputHealthStatus = "down"
	Unknown HealthOutputHealthStatus = "unknown"
	Up      HealthOutputHealthStatus = "up"
)

// Defines values for StateChangeEventNewState.
const (
	CLOSED            StateChangeEventNewState = "CLOSED"
	END               StateChangeEventNewState = "END"
	NOMINATIONSCLOSED StateChangeEventNewState = "NOMINATIONS_CLOSED"
	NOMINATIONSOPEN   StateChangeEventNewState = "NOMINATIONS_OPEN"
	RESULTS           StateChangeEventNewState = "RESULTS"
	VOTINGCLOSED      StateChangeEventNewState = "VOTING_CLOSED"
	VOTINGOPEN        StateChangeEventNewState = "VOTING_OPEN"
)

// Defines values for SubmitNominationExecutiveRoles.
const (
	ArcDelegate      SubmitNominationExecutiveRoles = "arc_delegate"
	EdiOfficer       SubmitNominationExecutiveRoles = "edi_officer"
	GrievanceOfficer SubmitNominationExecutiveRoles = "grievance_officer"
	President        SubmitNominationExecutiveRoles = "president"
	Secretary        SubmitNominationExecutiveRoles = "secretary"
	Treasurer        SubmitNominationExecutiveRoles = "treasurer"
)

// CheckResult defines model for CheckResult.
type CheckResult struct {
	Error     interface{} `json:"error,omitempty"`
	Status    string      `json:"status"`
	Timestamp *time.Time  `json:"timestamp,omitempty"`
}

// CreateElectionInputBody defines model for CreateElectionInputBody.
type CreateElectionInputBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Name Election name
	Name string `json:"name"`
}

// CreateElectionResponseBody defines model for CreateElectionResponseBody.
type CreateElectionResponseBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// ElectionId Election ID
	ElectionId string `json:"election_id"`
}

// ElectionMemberListSetInputBody defines model for ElectionMemberListSetInputBody.
type ElectionMemberListSetInputBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Zids User zIDs
	Zids *[]string `json:"zids"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// Location Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
	Location *string `json:"location,omitempty"`

	// Message Error message text
	Message *string `json:"message,omitempty"`

	// Value The value at the given location
	Value interface{} `json:"value,omitempty"`
}

// ErrorModel defines model for ErrorModel.
type ErrorModel struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Errors Optional list of individual error details
	Errors *[]ErrorDetail `json:"errors"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance *string `json:"instance,omitempty"`

	// Status HTTP status code
	Status *int64 `json:"status,omitempty"`

	// Title A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
	Title *string `json:"title,omitempty"`

	// Type A URI reference to human-readable documentation for the error.
	Type *string `json:"type,omitempty"`
}

// GenerateOTPInputBody defines model for GenerateOTPInputBody.
type GenerateOTPInputBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Zid User zID
	Zid string `json:"zid"`
}

// HealthOutput defines model for HealthOutput.
type HealthOutput struct {
	// Schema A URL to the JSON Schema for this object.
	Schema       *string                  `json:"$schema,omitempty"`
	Checked      time.Time                `json:"checked"`
	Details      *map[string]CheckResult  `json:"details,omitempty"`
	HealthStatus HealthOutputHealthStatus `json:"health_status"`
	Info         *map[string]interface{}  `json:"info,omitempty"`
}

// HealthOutputHealthStatus defines model for HealthOutput.HealthStatus.
type HealthOutputHealthStatus string

// Nomination defines model for Nomination.
type Nomination struct {
	// Schema A URL to the JSON Schema for this object.
	Schema             *string   `json:"$schema,omitempty"`
	CandidateName      string    `json:"candidate_name"`
	CandidateStatement string    `json:"candidate_statement"`
	CandidateZid       string    `json:"candidate_zid"`
	ContactEmail       string    `json:"contact_email"`
	CreatedAt          time.Time `json:"created_at"`
	DiscordUsername    string    `json:"discord_username"`
	ElectionId         string    `json:"election_id"`
	ExecutiveRoles     *[]string `json:"executive_roles"`
	UpdatedAt          time.Time `json:"updated_at"`
	Url                *string   `json:"url,omitempty"`
}

// StateChangeEvent defines model for StateChangeEvent.
type StateChangeEvent struct {
	NewState StateChangeEventNewState `json:"new_state"`
}

// StateChangeEventNewState defines model for StateChangeEvent.NewState.
type StateChangeEventNewState string

// SubmitNomination defines model for SubmitNomination.
type SubmitNomination struct {
	// Schema A URL to the JSON Schema for this object.
	Schema             *string                           `json:"$schema,omitempty"`
	CandidateName      string                            `json:"candidate_name"`
	CandidateStatement string                            `json:"candidate_statement"`
	ContactEmail       openapi_types.Email               `json:"contact_email"`
	DiscordUsername    string                            `json:"discord_username"`
	ExecutiveRoles     *[]SubmitNominationExecutiveRoles `json:"executive_roles"`
	Url                *string                           `json:"url,omitempty"` // NOTE: edited to include omitempty as was not autogenerated
}

// SubmitNominationExecutiveRoles defines model for SubmitNomination.ExecutiveRoles.
type SubmitNominationExecutiveRoles string

// SubmitOTPInputBody defines model for SubmitOTPInputBody.
type SubmitOTPInputBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Otp OTP Code
	Otp string `json:"otp"`

	// Zid User zID
	Zid string `json:"zid"`
}

// CreateElectionJSONRequestBody defines body for CreateElection for application/json ContentType.
type CreateElectionJSONRequestBody = CreateElectionInputBody

// SetElectionMembersJSONRequestBody defines body for SetElectionMembers for application/json ContentType.
type SetElectionMembersJSONRequestBody = ElectionMemberListSetInputBody

// SubmitNominationJSONRequestBody defines body for SubmitNomination for application/json ContentType.
type SubmitNominationJSONRequestBody = SubmitNomination

// GenerateOtpJSONRequestBody defines body for GenerateOtp for application/json ContentType.
type GenerateOtpJSONRequestBody = GenerateOTPInputBody

// SubmitOtpJSONRequestBody defines body for SubmitOtp for application/json ContentType.
type SubmitOtpJSONRequestBody = SubmitOTPInputBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateElectionWithBody request with any body
	CreateElectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateElection(ctx context.Context, body CreateElectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetElectionMembersWithBody request with any body
	SetElectionMembersWithBody(ctx context.Context, electionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetElectionMembers(ctx context.Context, electionId string, body SetElectionMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNomination request
	GetNomination(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubmitNominationWithBody request with any body
	SubmitNominationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubmitNomination(ctx context.Context, body SubmitNominationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateOtpWithBody request with any body
	GenerateOtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GenerateOtp(ctx context.Context, body GenerateOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubmitOtpWithBody request with any body
	SubmitOtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubmitOtp(ctx context.Context, body SubmitOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// State request
	State(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHealth request
	GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateElectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateElectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateElection(ctx context.Context, body CreateElectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateElectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetElectionMembersWithBody(ctx context.Context, electionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetElectionMembersRequestWithBody(c.Server, electionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetElectionMembers(ctx context.Context, electionId string, body SetElectionMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetElectionMembersRequest(c.Server, electionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNomination(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNominationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitNominationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitNominationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitNomination(ctx context.Context, body SubmitNominationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitNominationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateOtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateOtpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateOtp(ctx context.Context, body GenerateOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateOtpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitOtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitOtpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitOtp(ctx context.Context, body SubmitOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitOtpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) State(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateElectionRequest calls the generic CreateElection builder with application/json body
func NewCreateElectionRequest(server string, body CreateElectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateElectionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateElectionRequestWithBody generates requests for CreateElection with any type of body
func NewCreateElectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/elections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetElectionMembersRequest calls the generic SetElectionMembers builder with application/json body
func NewSetElectionMembersRequest(server string, electionId string, body SetElectionMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetElectionMembersRequestWithBody(server, electionId, "application/json", bodyReader)
}

// NewSetElectionMembersRequestWithBody generates requests for SetElectionMembers with any type of body
func NewSetElectionMembersRequestWithBody(server string, electionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "election_id", runtime.ParamLocationPath, electionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/elections/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNominationRequest generates requests for GetNomination
func NewGetNominationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/nomination")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubmitNominationRequest calls the generic SubmitNomination builder with application/json body
func NewSubmitNominationRequest(server string, body SubmitNominationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitNominationRequestWithBody(server, "application/json", bodyReader)
}

// NewSubmitNominationRequestWithBody generates requests for SubmitNomination with any type of body
func NewSubmitNominationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/nomination")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGenerateOtpRequest calls the generic GenerateOtp builder with application/json body
func NewGenerateOtpRequest(server string, body GenerateOtpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGenerateOtpRequestWithBody(server, "application/json", bodyReader)
}

// NewGenerateOtpRequestWithBody generates requests for GenerateOtp with any type of body
func NewGenerateOtpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/otp/generate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSubmitOtpRequest calls the generic SubmitOtp builder with application/json body
func NewSubmitOtpRequest(server string, body SubmitOtpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitOtpRequestWithBody(server, "application/json", bodyReader)
}

// NewSubmitOtpRequestWithBody generates requests for SubmitOtp with any type of body
func NewSubmitOtpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/otp/submit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStateRequest generates requests for State
func NewStateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/state")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateElectionWithBodyWithResponse request with any body
	CreateElectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateElectionResponse, error)

	CreateElectionWithResponse(ctx context.Context, body CreateElectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateElectionResponse, error)

	// SetElectionMembersWithBodyWithResponse request with any body
	SetElectionMembersWithBodyWithResponse(ctx context.Context, electionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetElectionMembersResponse, error)

	SetElectionMembersWithResponse(ctx context.Context, electionId string, body SetElectionMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*SetElectionMembersResponse, error)

	// GetNominationWithResponse request
	GetNominationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNominationResponse, error)

	// SubmitNominationWithBodyWithResponse request with any body
	SubmitNominationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitNominationResponse, error)

	SubmitNominationWithResponse(ctx context.Context, body SubmitNominationJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitNominationResponse, error)

	// GenerateOtpWithBodyWithResponse request with any body
	GenerateOtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateOtpResponse, error)

	GenerateOtpWithResponse(ctx context.Context, body GenerateOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateOtpResponse, error)

	// SubmitOtpWithBodyWithResponse request with any body
	SubmitOtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitOtpResponse, error)

	SubmitOtpWithResponse(ctx context.Context, body SubmitOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitOtpResponse, error)

	// StateWithResponse request
	StateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StateResponse, error)

	// GetHealthWithResponse request
	GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)
}

type CreateElectionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *CreateElectionResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r CreateElectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateElectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetElectionMembersResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r SetElectionMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetElectionMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNominationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Nomination
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetNominationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNominationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitNominationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r SubmitNominationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitNominationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateOtpResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GenerateOtpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateOtpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitOtpResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r SubmitOtpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitOtpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StateResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r StateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *HealthOutput
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateElectionWithBodyWithResponse request with arbitrary body returning *CreateElectionResponse
func (c *ClientWithResponses) CreateElectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateElectionResponse, error) {
	rsp, err := c.CreateElectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateElectionResponse(rsp)
}

func (c *ClientWithResponses) CreateElectionWithResponse(ctx context.Context, body CreateElectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateElectionResponse, error) {
	rsp, err := c.CreateElection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateElectionResponse(rsp)
}

// SetElectionMembersWithBodyWithResponse request with arbitrary body returning *SetElectionMembersResponse
func (c *ClientWithResponses) SetElectionMembersWithBodyWithResponse(ctx context.Context, electionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetElectionMembersResponse, error) {
	rsp, err := c.SetElectionMembersWithBody(ctx, electionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetElectionMembersResponse(rsp)
}

func (c *ClientWithResponses) SetElectionMembersWithResponse(ctx context.Context, electionId string, body SetElectionMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*SetElectionMembersResponse, error) {
	rsp, err := c.SetElectionMembers(ctx, electionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetElectionMembersResponse(rsp)
}

// GetNominationWithResponse request returning *GetNominationResponse
func (c *ClientWithResponses) GetNominationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNominationResponse, error) {
	rsp, err := c.GetNomination(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNominationResponse(rsp)
}

// SubmitNominationWithBodyWithResponse request with arbitrary body returning *SubmitNominationResponse
func (c *ClientWithResponses) SubmitNominationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitNominationResponse, error) {
	rsp, err := c.SubmitNominationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitNominationResponse(rsp)
}

func (c *ClientWithResponses) SubmitNominationWithResponse(ctx context.Context, body SubmitNominationJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitNominationResponse, error) {
	rsp, err := c.SubmitNomination(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitNominationResponse(rsp)
}

// GenerateOtpWithBodyWithResponse request with arbitrary body returning *GenerateOtpResponse
func (c *ClientWithResponses) GenerateOtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateOtpResponse, error) {
	rsp, err := c.GenerateOtpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateOtpResponse(rsp)
}

func (c *ClientWithResponses) GenerateOtpWithResponse(ctx context.Context, body GenerateOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateOtpResponse, error) {
	rsp, err := c.GenerateOtp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateOtpResponse(rsp)
}

// SubmitOtpWithBodyWithResponse request with arbitrary body returning *SubmitOtpResponse
func (c *ClientWithResponses) SubmitOtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitOtpResponse, error) {
	rsp, err := c.SubmitOtpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitOtpResponse(rsp)
}

func (c *ClientWithResponses) SubmitOtpWithResponse(ctx context.Context, body SubmitOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitOtpResponse, error) {
	rsp, err := c.SubmitOtp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitOtpResponse(rsp)
}

// StateWithResponse request returning *StateResponse
func (c *ClientWithResponses) StateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StateResponse, error) {
	rsp, err := c.State(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStateResponse(rsp)
}

// GetHealthWithResponse request returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// ParseCreateElectionResponse parses an HTTP response from a CreateElectionWithResponse call
func ParseCreateElectionResponse(rsp *http.Response) (*CreateElectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateElectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateElectionResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseSetElectionMembersResponse parses an HTTP response from a SetElectionMembersWithResponse call
func ParseSetElectionMembersResponse(rsp *http.Response) (*SetElectionMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetElectionMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetNominationResponse parses an HTTP response from a GetNominationWithResponse call
func ParseGetNominationResponse(rsp *http.Response) (*GetNominationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNominationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Nomination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseSubmitNominationResponse parses an HTTP response from a SubmitNominationWithResponse call
func ParseSubmitNominationResponse(rsp *http.Response) (*SubmitNominationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitNominationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGenerateOtpResponse parses an HTTP response from a GenerateOtpWithResponse call
func ParseGenerateOtpResponse(rsp *http.Response) (*GenerateOtpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateOtpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseSubmitOtpResponse parses an HTTP response from a SubmitOtpWithResponse call
func ParseSubmitOtpResponse(rsp *http.Response) (*SubmitOtpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitOtpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseStateResponse parses an HTTP response from a StateWithResponse call
func ParseStateResponse(rsp *http.Response) (*StateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}
